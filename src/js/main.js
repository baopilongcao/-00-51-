// logd('ll点亮屏幕')
// let llre = ll.device.keepScreenOn(24 * 60 * 60 * 1000) //24小时 aj里面需要调长时间
// logd('ll点亮屏幕:' + llre)

引用模块()

// 调试设备函数()

模块.保存日志到本地()
模块.设置日志窗口()
检查申请悬浮窗权限()
自动化服务启动()
模块.保持屏幕唤醒状态()

logd('自动化服务状态' + 自动化服务状态());

if (守护自动化环境()) {
    logd('守护自动化环境成功')
}

检查手机系统高于7()

模块.设置启停控制窗口()

时时获取位置()

调试设备函数()

if (!模块.泡椒云网络验证()) {
    模块.对话框消息('警告!!', '验证失败,禁止运行')
    // 停止脚本()
    模块.停止脚本()
}

if (模块.贴牌版本() === '抖音火山版采集') {
    模块.运行中热更_死循环()
} else {
    if (模块.贴牌版本() != '兰总') {
        模块.运行中热更()
    }
}

判断是否需要启动抖音火山版采集()
判断是否需要启动团购采集()
判断是否需要启动猪蹄()

// 模块.运行中热更()

// 调试设备函数()

// 判断执行什么功能
let 执行功能 = readConfigString("执行功能")
if (!执行功能 || 执行功能 === '') {
    logd('未选择功能!');
    toast('未选择功能!');
    模块.停止脚本()
}

执行功能 = JSON.parse(执行功能)

let 配置对象 = readConfigString("jsonCfg")
配置对象 = JSON.parse(配置对象)

// 共享变量
let 抖音包名 = 'com.ss.android.ugc.aweme'
let 快手包名 = 'com.smile.gifmaker'
let 小红书包名 = 'com.xingin.xhs'
let 执行任务 = ''
let 最近几天有作品 = 999
let 已点用户 = []
let 已操作次数 = 0
let 有操作 = null
let 检测无障碍失效次数 = 0
let 种子用户 = null

// 跟随任务变动的变量
let 执行次数 = 1
let 关注概率 = 1
let 点赞概率 = 1
let 评论点赞概率 = 1
let 评论概率 = 1
let 粉丝间隔低 = 1
let 粉丝间隔高 = 1
let 粉丝间隔 = []
let 筛选作品数量 = 1
let 评论话术 = ''

let 头像点赞概率 = 1    //专属粉丝画像引流

let 截流抖音号 = ''  //精准截流

// !兰总的
let 精准引流_增强_下标 = 0
let 精准引流_增强_截流对象 = ''

let 任务_爬种子账号 = null  // 从巨推宝爬种子账号到自己数据库的开关

let 同城_增强_计数 = 0

let 异常计数 = 0    // 无法处理的异常,比如说出现验证码啥的

if (执行功能.执行功能 === '智能引流') {
    执行任务 = '智能引流'
    logd('启动任务:' + 执行任务)
    执行次数 = 配置对象.执行次数 * 1
    关注概率 = 配置对象.关注概率 * 1
    点赞概率 = 配置对象.点赞概率 * 1
    评论点赞概率 = 配置对象.评论点赞概率 * 1
    评论概率 = 配置对象.评论概率 * 1
    粉丝间隔低 = 配置对象.粉丝间隔低 * 1
    粉丝间隔高 = 配置对象.粉丝间隔高 * 1
    粉丝间隔 = [粉丝间隔低, 粉丝间隔高]
    筛选作品数量 = 配置对象.筛选作品数量 * 1
    评论话术 = 配置对象.评论话术 + ''
}
if (执行功能.执行功能 === '精准引流') {
    执行任务 = '精准引流'
    logd('启动任务:' + 执行任务)
    执行次数 = 配置对象.精准引流_执行次数 * 1

    // if (模块.贴牌版本() === '兰总') {
    //     if (执行次数 > 2500) {
    //         logd('执行次数:' + 执行次数 + ',重置为2500');
    //         执行次数 = 2500
    //     }
    //
    // }

    截流抖音号 = 配置对象.精准引流_对标抖音号 + ''

    // !兰总以外的
    精准引流_增强_截流对象 = 截流抖音号

    关注概率 = 配置对象.精准引流_关注概率 * 1
    点赞概率 = 配置对象.精准引流_点赞概率 * 1
    评论点赞概率 = 配置对象.精准引流_评论点赞概率 * 1
    评论概率 = 配置对象.精准引流_评论概率 * 1
    粉丝间隔低 = 配置对象.精准引流_粉丝间隔低 * 1
    粉丝间隔高 = 配置对象.精准引流_粉丝间隔高 * 1
    粉丝间隔 = [粉丝间隔低, 粉丝间隔高]
    筛选作品数量 = 配置对象.精准引流_筛选作品数量 * 1
    评论话术 = 配置对象.精准引流_评论话术 + ''
}
if (执行功能.执行功能 === '直播场控') {
    执行任务 = '直播场控'
    logd('启动任务:' + 执行任务)
    执行次数 = 配置对象.直播场控_执行次数 * 1
    评论话术 = 配置对象.直播场控_评论话术 + ''
}
if (执行功能.执行功能 === '粉丝画像引流') {
    执行任务 = '粉丝画像引流'
    logd('启动任务:' + 执行任务)
    执行次数 = 配置对象.粉丝画像引流_执行次数 * 1

    // if (模块.贴牌版本() === '兰总') {
    //     if (执行次数 > 2500) {
    //         logd('执行次数:' + 执行次数 + ',重置为2500');
    //         执行次数 = 2500
    //     }
    //
    // }

    关注概率 = 配置对象.粉丝画像引流_关注概率 * 1
    点赞概率 = 配置对象.粉丝画像引流_点赞概率 * 1
    评论点赞概率 = 配置对象.粉丝画像引流_评论点赞概率 * 1
    评论概率 = 配置对象.粉丝画像引流_评论概率 * 1
    粉丝间隔低 = 配置对象.粉丝画像引流_粉丝间隔低 * 1
    粉丝间隔高 = 配置对象.粉丝画像引流_粉丝间隔高 * 1
    粉丝间隔 = [粉丝间隔低, 粉丝间隔高]
    筛选作品数量 = 配置对象.粉丝画像引流_筛选作品数量 * 1
    评论话术 = 配置对象.粉丝画像引流_评论话术 + ''
    头像点赞概率 = 配置对象.粉丝画像引流_头像点赞概率 * 1
}

let storage = storages.create("本地存储");
storage.putString("同城引流", 'false');

if (执行功能.执行功能 === '同城引流') {

    执行任务 = '同城引流'

    storage.putString("同城引流", 'true');

    logd('启动任务:' + 执行任务)
    执行次数 = 配置对象.同城引流_执行次数 * 1

    // if (模块.贴牌版本() === '兰总') {
    //     if (执行次数 > 2500) {
    //         logd('执行次数:' + 执行次数 + ',重置为2500');
    //         执行次数 = 2500
    //     }
    //
    // }

    关注概率 = 配置对象.同城引流_关注概率 * 1
    点赞概率 = 配置对象.同城引流_点赞概率 * 1
    评论点赞概率 = 配置对象.同城引流_评论点赞概率 * 1
    评论概率 = 配置对象.同城引流_评论概率 * 1
    粉丝间隔低 = 配置对象.同城引流_粉丝间隔低 * 1
    粉丝间隔高 = 配置对象.同城引流_粉丝间隔高 * 1
    粉丝间隔 = [粉丝间隔低, 粉丝间隔高]
    筛选作品数量 = 配置对象.同城引流_筛选作品数量 * 1
    评论话术 = 配置对象.同城引流_评论话术 + ''
}
if (执行功能.执行功能 === '取消视频点赞') {

    执行任务 = '取消视频点赞'

    logd('启动任务:' + 执行任务)
    执行次数 = 配置对象.取消视频点赞_执行次数 * 1
    logd('执行次数:' + 执行次数)

    // if (模块.贴牌版本() === '兰总') {
    //     if (执行次数 > 2500) {
    //         logd('执行次数:' + 执行次数 + ',重置为2500');
    //         执行次数 = 2500
    //     }
    //
    // }

    关注概率 = 配置对象.同城引流_关注概率 * 1
    点赞概率 = 配置对象.同城引流_点赞概率 * 1
    评论点赞概率 = 配置对象.同城引流_评论点赞概率 * 1
    评论概率 = 配置对象.同城引流_评论概率 * 1
    粉丝间隔低 = 配置对象.同城引流_粉丝间隔低 * 1
    粉丝间隔高 = 配置对象.同城引流_粉丝间隔高 * 1
    粉丝间隔 = [粉丝间隔低, 粉丝间隔高]
    筛选作品数量 = 配置对象.同城引流_筛选作品数量 * 1
    评论话术 = 配置对象.同城引流_评论话术 + ''
}

//  快手
if (执行功能.执行功能 === '快手万能引流') {
    执行任务 = '快手万能引流'
    logd('启动任务:' + 执行任务)
    执行次数 = 配置对象.快手万能引流_执行次数 * 1
    关注概率 = 配置对象.快手万能引流_关注概率 * 1
    点赞概率 = 配置对象.快手万能引流_点赞概率 * 1
    评论点赞概率 = 配置对象.快手万能引流_评论点赞概率 * 1
    评论概率 = 配置对象.快手万能引流_评论概率 * 1
    评论话术 = 配置对象.快手万能引流_评论话术 + ''
}
if (执行功能.执行功能 === '快手同城引流') {
    执行任务 = '快手同城引流'
    logd('启动任务:' + 执行任务)
    执行次数 = 配置对象.快手同城引流_执行次数 * 1
    关注概率 = 配置对象.快手同城引流_关注概率 * 1
    点赞概率 = 配置对象.快手同城引流_点赞概率 * 1
    评论点赞概率 = 配置对象.快手同城引流_评论点赞概率 * 1
    评论概率 = 配置对象.快手同城引流_评论概率 * 1
    评论话术 = 配置对象.快手同城引流_评论话术 + ''
}

//  小红书
if (执行功能.执行功能 === '小红书万能引流') {
    执行任务 = '小红书万能引流'
    logd('启动任务:' + 执行任务)
    执行次数 = 配置对象.小红书万能引流_执行次数 * 1
    关注概率 = 配置对象.小红书万能引流_关注概率 * 1
    点赞概率 = 配置对象.小红书万能引流_点赞概率 * 1
    评论点赞概率 = 配置对象.小红书万能引流_评论点赞概率 * 1
    评论概率 = 配置对象.小红书万能引流_评论概率 * 1
    评论话术 = 配置对象.小红书万能引流_评论话术 + ''
}
if (执行功能.执行功能 === '小红书同城引流') {
    执行任务 = '小红书同城引流'
    logd('启动任务:' + 执行任务)
    执行次数 = 配置对象.小红书同城引流_执行次数 * 1
    关注概率 = 配置对象.小红书同城引流_关注概率 * 1
    点赞概率 = 配置对象.小红书同城引流_点赞概率 * 1
    评论点赞概率 = 配置对象.小红书同城引流_评论点赞概率 * 1
    评论概率 = 配置对象.小红书同城引流_评论概率 * 1
    评论话术 = 配置对象.小红书同城引流_评论话术 + ''
}

function 小红书_进入底部爱心界面() {

    logd('小红书_进入底部爱心界面')

    let 超时秒数 = 20
    let 起始时间 = 模块.获取时间().秒

    while (true) {

        if (模块.小红书.评论区爱心()) {
            return true
        }

        if (模块.小红书.评论输入框_表情按钮()) {
            back()
            sleep(模块.小红书.点击延时);
            continue
        }

        模块.小红书.点击视频或者图文评论图标()

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            // 模块.气泡弹窗('操作粉丝列表用户,' + '任务超时')
            logd('小红书_进入底部爱心界面,' + '任务超时')
            // toast('小红书_进入底部爱心界面,' + '任务超时')
            return null
        }

    }
}

function 小红书_评论区操作() {

    logd('小红书_评论区操作')

    let 超时秒数 = 30
    let 起始时间 = 模块.获取时间().秒


    有操作 = null

    if (模块.抖音.计算百分比概率(关注概率)) {
        // 模块.气泡弹窗('概率值:' + 关注概率 + ',触发关注事件')
        if (模块.小红书.点击关注()) {
            有操作 = true
        }
    }

    if (模块.抖音.计算百分比概率(点赞概率)) {
        // 模块.气泡弹窗('概率值:' + 关注概率 + ',触发关注事件')
        if (模块.小红书.点击视频点赞()) {
            有操作 = true
        }
    }

    logd('计算评论点赞概率');
    if (模块.抖音.计算百分比概率(评论点赞概率)) {
        // 模块.气泡弹窗('概率值:' + 评论点赞概率 + ',触发评论点赞事件')
        // 日志悬浮窗.日志('概率值:' + 评论点赞概率 + ',触发评论点赞事件')
        logd('概率值:' + 评论点赞概率 + ',触发评论点赞事件')
        // 模块.快手.点击评论区按钮()
        if (模块.小红书.点击评论区所有爱心()) {
            有操作 = true
        }
    }

    logd('计算评论概率');
    if (模块.抖音.计算百分比概率(评论概率)) {
        // 模块.气泡弹窗('概率值:' + 评论概率 + ',触发评论事件')
        // 日志悬浮窗.日志('概率值:' + 评论概率 + ',触发评论事件')
        logd('概率值:' + 评论概率 + ',触发评论事件')
        // 模块.快手.点击评论区按钮()
        if (模块.小红书.点击视频或者图文评论图标()) {
            let 话术 = 模块.随机获取数组元素(评论话术, '#')
            logd('话术:' + 话术)
            小红书评论输入账号(话术)
            sleep(2000)
        }
        if (模块.小红书.点击输入框发送()) {
            有操作 = true
        }
    }

    // 模块.刷新控件缓存()
    // 模块.强制刷新节点()

    统计有操作次数()

    if (执行任务 === '小红书同城引流') {
        if (!模块.小红书.返回同城视频图文列表()) {
            return null
        }
    } else {
        if (!模块.小红书.返回视频图文列表()) {
            return null
        }
    }

    if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
        // 模块.气泡弹窗('操作粉丝列表用户,' + '任务超时')
        logd('小红书_评论区操作,' + '任务超时')
        // toast('小红书_评论区操作,' + '任务超时')
        return null
    }
}

function 小红书_万能引流() {

    logd('小红书_万能引流')

    let 超时秒数 = 20
    let 起始时间 = 模块.获取时间().秒

    while (true) {

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            // 模块.气泡弹窗('操作粉丝列表用户,' + '任务超时')
            logd('小红书_万能引流,' + '任务超时')
            // toast('小红书_万能引流,' + '任务超时')
            return null
        }

        let arr = 模块.小红书.遍历视频图文列表()

        if (arr) {

            for (let i = 0; i < arr.length; i++) {

                let 用户昵称 = arr[i].text
                let 跳过 = null
                let 跳过计数 = 0
                // 模块.气泡弹窗('用户昵称:' + 用户昵称)
                // 日志悬浮窗.日志('用户昵称:' + 用户昵称)
                logd('视频图文列表昵称:' + 用户昵称)

                for (let i = 0; i < 已点用户.length; i++) {
                    //logd(已点用户[i]);
                    if (已点用户[i] == 用户昵称) {
                        // 模块.气泡弹窗('用户昵称:' + 用户昵称 + ',已点击过,跳过此用户')
                        // 日志悬浮窗.日志('用户昵称:' + 用户昵称 + ',已点击过,跳过此用户')
                        跳过 = true
                        跳过计数 = 跳过计数 + 1
                    }
                }

                logd('跳过计数:' + 跳过计数)
                logd('arr.length:' + arr.length)

                if (跳过) {
                    continue
                }

                // logd(arr[i])
                clickPoint((arr[i].bounds.left + arr[i].bounds.right) / 2, (arr[i].bounds.top + arr[i].bounds.bottom) / 2)
                sleep(模块.小红书.点击延时)

                if (!模块.小红书.分享按钮()) {

                    if (!模块.小红书.返回视频图文列表()) {
                        return null
                    }

                    continue

                }

                起始时间 = 模块.获取时间().秒 // 重置超时时间

                已点用户.push(用户昵称)

                let 进入底部爱心界面 = 小红书_进入底部爱心界面()

                if (!进入底部爱心界面) {
                    if (!模块.小红书.返回视频图文列表()) {
                        return null
                    }
                    return null
                }

                let 评论区操作 = 小红书_评论区操作()

                if (!评论区操作) {
                    if (!模块.小红书.返回视频图文列表()) {
                        return null
                    }
                    return null
                }

                if (!模块.小红书.返回视频图文列表()) {
                    return null
                }

            }

            模块.纵向滑动屏幕(0.7, 0)
            sleep(2000)

        }


    }
}

function 小红书_同城引流() {

    logd('小红书_同城引流')

    let 超时秒数 = 20
    let 起始时间 = 模块.获取时间().秒

    while (true) {

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            // 模块.气泡弹窗('操作粉丝列表用户,' + '任务超时')
            logd('小红书_同城引流,' + '任务超时')
            // toast('小红书_同城引流,' + '任务超时')
            return null
        }

        let arr = 模块.小红书.遍历同城视频图文列表()

        if (arr) {

            for (let i = 0; i < arr.length; i++) {

                let 用户昵称 = arr[i].text
                let 跳过 = null
                let 跳过计数 = 0
                // 模块.气泡弹窗('用户昵称:' + 用户昵称)
                // 日志悬浮窗.日志('用户昵称:' + 用户昵称)
                logd('视频图文列表昵称:' + 用户昵称)

                for (let i = 0; i < 已点用户.length; i++) {
                    //logd(已点用户[i]);
                    if (已点用户[i] == 用户昵称) {
                        // 模块.气泡弹窗('用户昵称:' + 用户昵称 + ',已点击过,跳过此用户')
                        // 日志悬浮窗.日志('用户昵称:' + 用户昵称 + ',已点击过,跳过此用户')
                        跳过 = true
                        跳过计数 = 跳过计数 + 1
                    }
                }

                logd('跳过计数:' + 跳过计数)
                logd('arr.length:' + arr.length)

                if (跳过) {
                    continue
                }

                // logd(arr[i])
                clickPoint((arr[i].bounds.left + arr[i].bounds.right) / 2, (arr[i].bounds.top + arr[i].bounds.bottom) / 2)
                sleep(模块.小红书.点击延时)

                if (!模块.小红书.分享按钮()) {

                    if (!模块.小红书.返回同城视频图文列表()) {
                        return null
                    }

                    continue

                }

                起始时间 = 模块.获取时间().秒 // 重置超时时间

                已点用户.push(用户昵称)

                let 进入底部爱心界面 = 小红书_进入底部爱心界面()

                if (!进入底部爱心界面) {
                    if (!模块.小红书.返回同城视频图文列表()) {
                        return null
                    }
                    return null
                }

                let 评论区操作 = 小红书_评论区操作()

                if (!评论区操作) {
                    if (!模块.小红书.返回同城视频图文列表()) {
                        return null
                    }
                    return null
                }

                if (!模块.小红书.返回同城视频图文列表()) {
                    return null
                }

            }

            模块.纵向滑动屏幕(0.7, 0)
            sleep(2000)

        }


    }
}

function 停止抖音火山版运行() {

    logd('停止抖音火山版运行')

    let 超时秒数 = 30
    let 起始时间 = 模块.获取时间().秒

    while (true) {

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            logd('停止抖音火山版运行,' + '任务超时')
            // toast('停止抖音运行,' + '任务超时')
            return null
        }

        模块.打开APP详情页('com.ss.android.ugc.live')
        sleep(3000);

        // 小米
        if (模块.设备.点击结束运行()) {
            if (模块.设备.点击确定()) {
                return true
            }
        }

        // 华为
        if (模块.设备.点击强行停止()) {
            if (模块.设备.点击确定()) {
                return true
            }
            if (模块.设备.点击强行停止()) {
                return true
            }
        }

    }

}

function 停止抖音运行() {

    logd('停止抖音运行')

    let 超时秒数 = 30
    let 起始时间 = 模块.获取时间().秒

    while (true) {

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            logd('停止抖音运行,' + '任务超时')
            // toast('停止抖音运行,' + '任务超时')
            return null
        }

        模块.打开APP详情页('com.ss.android.ugc.aweme')
        sleep(3000);

        // 小米
        if (模块.设备.点击结束运行()) {
            if (模块.设备.点击确定()) {
                return true
            }
        }

        // 华为
        if (模块.设备.点击强行停止()) {
            if (模块.设备.点击确定()) {
                return true
            }
            if (模块.设备.点击强行停止()) {
                return true
            }
        }

    }

}

function 抖音火山版获取火山号和昵称() {

    logd('抖音火山版获取火山号和昵称')

    let 超时秒数 = 15
    let 起始时间 = 模块.获取时间().秒
    let 火山号火山昵称 = []

    while (true) {

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            logd('抖音火山版获取火山号和昵称,' + '任务超时')
            toast('抖音火山版获取火山号和昵称,' + '任务超时')
            return null
        }

        // 起始时间 = 模块.获取时间().秒  //重置超时时间
        // 这里开始往下写代码

        logd('往上拉半页');
        模块.纵向滑动屏幕(0.2, 0.7)
        sleep(2500);

        模块.抖音.点击抖音火山_主页_分享()

        let 火山号 = 模块.抖音.抖音火山_主页_分享_火山号()
        let 火山昵称 = 模块.抖音.抖音火山_主页_分享_火山昵称()

        logd(火山号, 火山昵称);

        火山号火山昵称[0] = 火山号
        火山号火山昵称[1] = 火山昵称

        if (火山号) {
            return {'返回值': true, '火山号火山昵称': 火山号火山昵称}
        } else {
            return {'返回值': null}
        }

    }

}

function 抖音火山版检查作品是否超过天数(d) {

    logd('抖音火山版检查作品是否超过天数')

    let 超时秒数 = 20
    let 起始时间 = 模块.获取时间().秒

    while (true) {

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            logd('抖音火山版检查作品是否超过天数,' + '任务超时')
            toast('抖音火山版检查作品是否超过天数,' + '任务超时')
            return null
        }

        // 起始时间 = 模块.获取时间().秒  //重置超时时间
        // 这里开始往下写代码

        logd('主页往下拉一半');
        模块.纵向滑动屏幕(0.5, 0)
        sleep(2000);

        if (模块.抖音.抖音火山_点击屏幕重试()) {
            模块.关闭日志浮窗_不区分包名()
            模块.对话框消息('警告!!', '需要恢复了,换一个机型继续')
            exit()
        }


        if (!模块.抖音.抖音火山版点击第一个未置顶作品()) {
            // 模块.抖音.点击作品数量() // 火山版好像用不上
        }

        sleep(2000);
        let 判断时间 = 模块.抖音.抖音火山版判断作品超过天数(d)
        if (判断时间 === '时间不对') {
            return null
        }

        if (判断时间) {
            return true
        }
    }
}

function 检查作品是否超过天数(d) {

    logd('检查作品是否超过天数')

    let 超时秒数 = 20
    let 起始时间 = 模块.获取时间().秒

    while (true) {

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            logd('检查作品是否超过天数,' + '任务超时')
            toast('检查作品是否超过天数,' + '任务超时')
            return null
        }

        // 起始时间 = 模块.获取时间().秒  //重置超时时间
        // 这里开始往下写代码

        if (!模块.抖音.点击第一个未置顶作品()) {
            模块.抖音.点击作品数量()
        }

        let 判断时间 = 模块.抖音.判断作品超过天数(d)
        if (判断时间 === '时间不对') {
            return null
        }

        if (判断时间) {
            return true
        }
    }
}

function 遍历有团购获取号码() {

    logd('遍历有团购获取号码')

    // 这两参数只是默认值,下面会重新赋值,失效
    /*let 筛选粉丝数量 = 50000
    let 筛选作品天数 = 90*/

    let 超时秒数 = 240 //一页点完都蛮久,一直没有成功上传会触发,时间太短不好,进一次的时间也很长
    let 起始时间 = 模块.获取时间().秒

    let 记录翻页后的地址 = []

    while (true) {

        function 获取手机号码() {

            logd('获取手机号码')

            let 超时秒数 = 20
            let 起始时间 = 模块.获取时间().秒

            // if (!模块.抖音.点击团购_电话按钮()) {
            //     return null
            // }

            while (true) {

                if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
                    logd('获取手机号码,' + '任务超时')
                    // toast('获取手机号码,' + '任务超时')
                    return null
                }

                模块.抖音.点击团购_电话按钮()

                let 第一个号码 = null

                let 号码 = 模块.抖音.所有团购_联系号码()

                if (!号码) {
                    // if (!模块.抖音.返回团购_人均()) {
                    //     return null
                    // }
                    // continue
                } else {
                    第一个号码 = 号码.第一个号码
                    logd('第一个号码:' + 第一个号码);
                    if (!第一个号码) {
                        if (!模块.抖音.返回团购_人均()) {
                            return null
                        }
                        return null //获取不到手机号直接返回
                    }
                }

                // 起始时间 = 模块.获取时间().秒 //重置超时时间

                logd('第一个号码:' + 第一个号码);
                if (!第一个号码) {
                    if (!模块.抖音.返回团购_人均()) {
                        return null
                    }
                    return null //获取不到手机号直接返回
                }

                // 判断兰总数据库是否存在数据
                // if (模块.数据库.小武_999已存在电话号码(第一个号码)) {
                //     if (!模块.抖音.返回团购_人均()) {
                //         return null
                //     }
                //     return null
                // }
                // if (模块.数据库.小武_xnhmzzc已存在电话号码(第一个号码)) {
                //     if (!模块.抖音.返回团购_人均()) {
                //         return null
                //     }
                //     return null
                // }

                // let 存入谁 // 存入谁的环境,默认是兰总的环境

                // 下面两个参数要自己改动,存入谁就把另一个注释
                // // 存入谁 = 'lz' // 存入兰总
                // 存入谁 = 'wgq' // 存入王总

                let 兰总数据库存在号码 = true
                let wgq数据库存在号码 = true

                if (存入谁 === 'wgq') {
                    logd('存入谁 === wgq')
                    if (模块.数据库.小武_wgq全数据库已存在电话号码(第一个号码)) {
                        if (!模块.抖音.返回团购_人均()) {
                            return null
                        }
                        return null
                    }
                } else if (存入谁 === 'lz') {
                    logd('存入谁 === lz')
                    if (模块.数据库.小武_兰总全数据库已存在电话号码(第一个号码)) {
                        if (!模块.抖音.返回团购_人均()) {
                            return null
                        }
                        return null
                    }
                }

                    // 兰总数据库存在号码 = null
                    // wgq数据库存在号码 = null

                    // let 存入环境 = 'tg'//'dy999_wgq' //默认存入的环境,应该是没作用了

                    // 按照顺序循环存入,只存入一个
                    // 是否存入wgq
                    // if (!模块.数据库.小武_999_wgq已存在电话号码(第一个号码)) {
                    //     logd('存入wgq');
                    //     存入环境 = 'dy999_wgq'
                    //     筛选粉丝数量 = 80000
                    //     筛选作品天数 = 60
                    // }
                    // // 是否存入lz
                    // else if (!模块.数据库.小武_999已存在电话号码(第一个号码) && !模块.数据库.小武_xnhmzzc已存在电话号码(第一个号码)) {
                    //     logd('存入lz');
                    //     存入环境 = 'tg'
                    //     筛选粉丝数量 = 50000
                    //     筛选作品天数 = 90
                    // }

                    // 存入lz
                    // if (!模块.数据库.小武_999已存在电话号码(第一个号码) && !模块.数据库.小武_xnhmzzc已存在电话号码(第一个号码)) { // 不知道干啥用的

                    // if (存入谁 === 'wgq'){
                    //     logd('存入谁 === wgq')
                    //     if (!wgq数据库存在号码) {
                    //         logd('存入wgq');
                    //         存入环境 = 'tg_wgq'
                    //         筛选粉丝数量 = 40000
                    //         筛选作品天数 = 60
                    //     }
                    // }
                    // if (存入谁 === '兰总'){
                    //     logd('存入谁 === 兰总')
                    //     if (!兰总数据库存在号码) {
                    //         logd('存入lz');
                    //         存入环境 = 'tg'
                    //         筛选粉丝数量 = 50000
                    //         筛选作品天数 = 90
                    //     }
                    // }


                    // if (!兰总数据库存在号码) {
                    //     logd('存入lz');
                    //     存入环境 = 'tg'
                    //     筛选粉丝数量 = 50000
                    //     筛选作品天数 = 90
                    // }
                    // if (!wgq数据库存在号码) {
                    //     logd('存入wgq');
                    //     存入环境 = 'tg_wgq'
                    //     筛选粉丝数量 = 40000
                    //     筛选作品天数 = 60
                    // }

                // 都不存入
                else {
                    logd('都不存入');
                    if (!模块.抖音.返回团购_人均()) {
                        return null
                    }
                    return null
                }


                if (模块.抖音.团购_取消()) {
                    if (!模块.抖音.点击团购_商家主页()) {
                        if (!模块.抖音.返回团购_人均()) {
                            return null
                        }
                        return null
                    }
                }

                模块.抖音.点击团购_商家主页()

                let 用户昵称 = 模块.抖音.主页用户昵称()

                if (!用户昵称) {
                    // if (!模块.抖音.返回团购_人均()) {
                    //     return null
                    // }
                    // continue
                }

                if (!模块.抖音.主页_蓝V()) {
                    return null
                }

                let 粉丝数量 = 模块.抖音.获取粉丝数量()
                if (粉丝数量) {

                    if (粉丝数量 < 筛选粉丝数量) {
                        logd('粉丝数量:' + 粉丝数量 + ',符合条件')
                        toast('粉丝数量:' + 粉丝数量 + ',符合条件')
                    } else {
                        logd('粉丝数量:' + 粉丝数量 + ',不符合条件')
                        toast('粉丝数量:' + 粉丝数量 + ',不符合条件')
                        if (!模块.抖音.返回团购_人均()) {
                            return null
                        }
                        return null
                    }

                } else {
                    // 模块.气泡弹窗('没找到:' + '粉丝数量')
                    // return null
                }

                logd('下拉一半作品页');
                模块.纵向滑动屏幕(0.5, 0) //有些作品不显示出来
                sleep(2000);

                let 检查 = 检查作品是否超过天数(筛选作品天数)
                if (!检查) {
                    if (!模块.抖音.返回团购_人均()) {
                        return null
                    }
                    return null
                }

                if (!模块.抖音.返回个人主页()) {
                    return null
                }

                模块.抖音.点击主页右上三个点()

                let 抖音号 = 模块.抖音.主页_三个点_抖音号()

                logd(抖音号);

                if (!抖音号) {
                    // if (!模块.抖音.返回团购_人均()) {
                    //     return null
                    // }
                    continue
                }

                // logd('小武_上传数据到dy');

                // 号码 = 号码.号码数组.toString()

                // 拼接两个手机号,用;号做单位
                号码 = 号码.号码数组.join(';')

                if (!用户昵称) {

                    let 主页_三个点_昵称 = 模块.抖音.主页_三个点_昵称()

                    if (主页_三个点_昵称) {
                        用户昵称 = 主页_三个点_昵称
                    }
                }

                // 模块.数据库.小武_上传数据到dy('tg', 用户昵称, 抖音号, 号码)

                模块.数据库.小武_上传数据到dy(存入环境, 用户昵称, 抖音号, 号码)

                logd('重置判断成功上传超时的时间');
                toast('重置判断成功上传超时的时间');

                起始时间_成功上传 = 模块.获取时间().秒 // 重置判断成功上传超时的时间

                return true

            }

        }

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            logd('遍历有团购获取号码,' + '任务超时')
            // toast('遍历有团购获取号码,' + '任务超时')
            if (!模块.抖音.返回团购_人均()) {
                return null
            }
            return null
        }

        let 所有人均 = 模块.抖音.团购_所有人均()

        if (所有人均) {

            for (let i = 0; i < 所有人均.length; i++) {

                let 数量 = i + 1
                let 地址 = 所有人均[i].text
                地址 = 地址.replace(/\s*/g, "") // 去除地址的空格
                地址 = 地址.split('人均') // 分割人均 有些地址带空格 : 面馆 拙政园 人均48元 11.0公里
                地址 = 地址[0]

                let 跳过地址 = null

                logd('点击第:' + 数量 + '个商家,地址为:' + 地址);

                for (let i = 0; i < 记录翻页后的地址.length; i++) {
                    if (地址 === 记录翻页后的地址[i]) {
                        logd(地址 + ',已经点击过了,跳过这个地址');
                        跳过地址 = true
                        continue
                    }
                }

                if (跳过地址) {
                    continue
                }

                // clickPoint((re.bounds.left + re.bounds.right) / 2, (re.bounds.top + re.bounds.bottom) / 2)

                clickPoint((所有人均[i].bounds.left + 所有人均[i].bounds.right) / 2, (所有人均[i].bounds.top + 所有人均[i].bounds.bottom) / 2)
                sleep(模块.抖音.点击延时)

                let 远程配置 = 模块.数据库.获取脚本远程参数()

                存入环境 = 远程配置.存入环境
                筛选粉丝数量 = 远程配置.筛选粉丝数量
                筛选作品天数 = 远程配置.筛选作品天数

                logd('存入环境:' + 存入环境);
                logd('筛选粉丝数量:' + 筛选粉丝数量);
                logd('筛选作品天数:' + 筛选作品天数);

                toast('存入环境:' + 存入环境 + ',筛选粉丝数量:' + 筛选粉丝数量 + ',筛选作品天数:' + 筛选作品天数);

                记录翻页后的地址.push(地址)

                let 结果 = 获取手机号码()

                if (结果) {
                    起始时间 = 模块.获取时间().秒 //重置超时时间
                } else {
                    // if (!模块.抖音.返回团购_人均()) {
                    //     return null
                    // }
                    // 起始时间 = 模块.获取时间().秒 //重置超时时间
                    // continue
                }

                if (!模块.抖音.返回团购_人均()) {
                    return null
                }

            }

        }

        if (模块.抖音.团购_所有人均()) {
            团购_翻页()
            记录翻页后的地址 = []
        }

        if (模块.抖音.团购_暂时没有更多了()) {
            logd('暂时没有更多了');
            toast('暂时没有更多了');
            return null
        }

    }

}

function 团购_翻页() {

    logd('团购_翻页');
    模块.纵向滑动屏幕(0.8, 0) //跟人均控件范围
    sleep(2000)

}

function 抖音火山版筛选粉丝_返回控件对象() {

    // 判断粉丝数量是否符合条件
    // 这两参数只是默认值,下面会重新赋值
    let 筛选粉丝数量 = 50000

    let re = 模块.抖音.获取抖音火山_用户_粉丝数()
    if (!re) {
        return
    }

    let 粉丝数量 = re.数量
    let 对象 = re.控件对象

    if (粉丝数量 < 筛选粉丝数量) {
        logd('粉丝数量:' + 粉丝数量 + ',符合条件')
        toast('粉丝数量:' + 粉丝数量 + ',符合条件')
        return 对象
    } else {
        logd('粉丝数量:' + 粉丝数量 + ',不符合条件')
        toast('粉丝数量:' + 粉丝数量 + ',不符合条件')
        return;
    }

}


function 进入抖音火山版搜索关键词(a) {

    logd('进入抖音火山版搜索关键词')

    let 超时秒数 = 30
    let 起始时间 = 模块.获取时间().秒

    utils.openApp("com.ss.android.ugc.live");
    sleep(6000);

    while (true) {

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            logd('进入抖音火山版搜索关键词,' + '任务超时')
            // toast('进入团购搜索关键词,' + '任务超时')
            return null
        }

        // 模块.抖音.抖音火山跳转首页()

        模块.抖音.点击抖音火山_同意()

        模块.抖音.点击抖音火山_搜索放大镜()

        if (模块.抖音.点击抖音火山_搜索编辑框()) {
            抖音火山版搜索_输入话术(a)
            模块.抖音.点击抖音火山_搜索按钮()
            sleep(6000)
            if (模块.抖音.点击抖音火山_用户()) {
                return true
            }
        }

        // 一直返回,直到杀死APP,好像一直返回都杀不死
        back()
        sleep(2000);

    }

}

function 抖音火山版采集() {

    logd('抖音火山版采集')

    let 点击屏幕重试次数 = 0

    let 超时秒数 = 4 * 60 // 多少分钟没有找到蓝v就null
    let 起始时间 = 模块.获取时间().秒

    let 起始时间_打开抖音 = 模块.获取时间().秒
    let 超时秒数_打开抖音 = 30 * 60 // 运行多少分钟关闭重新打开一下抖音火山版

    寻找未重复的数据_超时秒数 = 8 * 60 // 多少分钟一直是重复的手机号码就重新来
    寻找未重复的数据_起始时间 = 模块.获取时间().秒


    存入谁 = '' // 存入谁的环境,存入谁就把另一个注释
    存入环境 = ''

    // 存入谁 = 'lz' // 存入兰总
    存入谁 = 'wgq' // 存入王总

    // 默认的筛选条件
    筛选粉丝数量 = 50000
    筛选作品天数 = 60

    if (存入谁 === 'wgq') {
        logd('存入wgq');
        存入环境 = 'hs_wgq'
        筛选粉丝数量 = 40000
        筛选作品天数 = 60
        logd('存入环境:' + 存入环境);
        logd('筛选粉丝数量:' + 筛选粉丝数量);
        logd('筛选作品天数:' + 筛选作品天数);
    }
    if (存入谁 === 'lz') {
        logd('存入lz');
        存入环境 = 'hs'
        筛选粉丝数量 = 50000
        筛选作品天数 = 90
        logd('存入环境:' + 存入环境);
        logd('筛选粉丝数量:' + 筛选粉丝数量);
        logd('筛选作品天数:' + 筛选作品天数);
    }

    let 搜索词 = 生成随机地名和姓氏()

    if (!搜索词) {
        return
    }

    let 进入火山搜索 = 进入抖音火山版搜索关键词(搜索词)

    if (!进入火山搜索) {
        return
    }

    while (true) {

        if ((模块.获取时间().秒 - 寻找未重复的数据_起始时间) > 寻找未重复的数据_超时秒数) {
            logd('已运行,' + 寻找未重复的数据_超时秒数 + '秒没有找到有效的手机号码')
            // toast('已运行,' + 超时秒数_打开抖音 + '秒,重新打开抖音')
            return null
        }

        if ((模块.获取时间().秒 - 起始时间_打开抖音) > 超时秒数_打开抖音) {
            logd('已运行,' + 超时秒数_打开抖音 + '秒,重新打开抖音火山版')
            // toast('已运行,' + 超时秒数_打开抖音 + '秒,重新打开抖音')
            return null
        }

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            logd('抖音火山版采集,' + 超时秒数 + '秒,没有找到蓝v,' + '任务超时')
            // toast('团购采集,' + '任务超时')
            return null
        }

        if (模块.抖音.抖音火山_点击屏幕重试()) {
            点击屏幕重试次数 = 点击屏幕重试次数 + 1
            if (点击屏幕重试次数 >= 2) {
                点击屏幕重试次数 = 点击屏幕重试次数 + ''
                let 警告内容 = '点击屏幕重试出现次数' + 点击屏幕重试次数 + ',需要恢复了,换一个机型继续'
                模块.关闭日志浮窗_不区分包名()
                模块.对话框消息('警告!!', '需要恢复了,换一个机型继续')
                exit()
            } else {
                logd('点击屏幕重试出现次数:' + 点击屏幕重试次数)
                模块.抖音.返回抖音火山_搜索放大镜()

                let 搜索词 = 生成随机地名和姓氏()

                if (!搜索词) {
                    return
                }

                let 进入火山搜索 = 进入抖音火山版搜索关键词(搜索词)

                if (!进入火山搜索) {
                    return
                }

                // break
            }
        }

        // 下拉开始寻找蓝v,一定时间内找不到就返回null

        let 左上x
        let 左上y
        let 右下x
        let 右下y

        let arr = 模块.抖音.返回所有符合抖音火山_用户_粉丝数的控件对象(筛选粉丝数量)
        if (!arr) {

            continue
            // return;
        }

        for (let i = 0; i < arr.length; i++) {

            左上x = arr[i].parent().parent().bounds.left
            左上y = arr[i].parent().parent().bounds.top
            右下x = arr[i].parent().parent().bounds.right
            右下y = arr[i].parent().parent().bounds.bottom

            logd(左上x, 左上y, 右下x, 右下y);

            let aimage = image.captureFullScreen()
            logd(aimage);

            if (aimage != null) {
                let points = image.findMultiColor(aimage, "#ECFFFF-#101010", "-11|-3|#52BBFD-#101010,9|-4|#3EA4F9-#101010,-2|-14|#42A5FA-#101010,-1|6|#51BAFB-#101010", 0.9, 左上x, 左上y, 右下x, 右下y, 1, 1);
                logd("points " + JSON.stringify(points));
                //这玩意是个数组
                if (points && points.length > 0) {
                    for (let i = 0; i < points.length; i++) {
                        logd('找到蓝v标志,坐标:', points[i], points[i].x, points[i].y)
                        //点击坐标
                        clickPoint(points[i].x, points[i].y)
                        sleep(4000);

                        logd('找到蓝v标志,重置超时时间');
                        起始时间 = 模块.获取时间().秒  // 找到蓝v标志,重置超时时间
                        抖音火山版_主页采集号码()
                        if (!模块.抖音.返回抖音火山_用户_粉丝数()) {
                            return
                        }
                    }
                } else {
                    logd('没有找到蓝v');
                }
                //图片要回收
                image.recycle(aimage)
            }
        }

        模块.纵向滑动屏幕(0.9, 0)
        sleep(3000);

        if (模块.抖音.抖音火山_用户_没有更多了()) {

            模块.抖音.返回抖音火山_搜索放大镜()

            let 搜索词 = 生成随机地名和姓氏()

            if (!搜索词) {
                return
            }

            let 进入火山搜索 = 进入抖音火山版搜索关键词(搜索词)

            if (!进入火山搜索) {
                return
            }
            // return
        }

    }

}

function 进入团购搜索关键词(a) {

    logd('进入团购搜索关键词')

    let 超时秒数 = 35
    let 起始时间 = 模块.获取时间().秒

    while (true) {

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            logd('进入团购搜索关键词,' + '任务超时')
            // toast('进入团购搜索关键词,' + '任务超时')
            return null
        }

        模块.抖音.意图跳转同城()
        模块.抖音.点击取消()

        if (模块.抖音.点击附近美食()) {
            sleep(5000);
        }

        if (模块.抖音.点击同城_团购_搜索放大镜()) {
            团购搜索_输入话术(a)
            模块.抖音.点击团购_搜索()
            sleep(6000)
            if (模块.抖音.下滑寻找人均()) {
                return true
            } else {
                return null
            }
        }

        // 下面的是之前的版本用的,24.0和24.1用的
        // 后来抖音更新了,点开团购要登录账号

        // 模块.抖音.意图跳转指定团购界面()
        //
        // 模块.抖音.点击团购_搜索放大镜()
        //
        // if (模块.抖音.团购_搜索()) {
        //     团购搜索_输入话术(a)
        //     模块.抖音.点击团购_搜索()
        //     sleep(5000);
        //     if (!自动截屏找图('/sdcard/有团购小.jpg', true, 0, 0, 0, 0, 1)) {
        //         sleep(5000);
        //         return null
        //     }
        // }
        //
        // if (自动截屏找图('/sdcard/有团购小.jpg', true, 0, 0, 0, 0, 1)) {
        //     sleep(5000);
        //     return true
        // }

    }

}

function 生成随机地名和姓氏() {

    let 随机地名 = 模块.随机地名()

    let 随机姓氏 = 模块.随机姓氏()

    let 随机组成 = 随机地名 + 随机姓氏

    随机组成 = 随机组成.replace(/\s*/g, "") // 去除空格

    logd(随机组成);
    toast(随机组成);

    if (随机组成 && 随机组成 != '') {
        return 随机组成
    } else {
        return null
    }

}

function 团购采集() {

    logd('团购采集')

    let 超时秒数 = 60
    let 起始时间 = 模块.获取时间().秒

    let 起始时间_打开抖音 = 模块.获取时间().秒
    let 超时秒数_打开抖音 = 20 * 60 // 运行多少分钟关闭重新打开一下抖音

    起始时间_成功上传 = 模块.获取时间().秒
    超时秒数_成功上传 = 8 * 60 // 多少分钟没有成功上传的数据就重新来过

    存入谁 = '' // 存入谁的环境,存入谁就把另一个注释
    存入环境 = ''

    存入谁 = 'lz' // 存入兰总
    // 存入谁 = 'wgq' // 存入王总

    // 默认的筛选条件
    筛选粉丝数量 = 50000
    筛选作品天数 = 90

    if (存入谁 === 'wgq') {
        logd('存入wgq');
        存入环境 = 'tg_wgq'
        筛选粉丝数量 = 40000
        筛选作品天数 = 60
        logd('存入环境:' + 存入环境);
        logd('筛选粉丝数量:' + 筛选粉丝数量);
        logd('筛选作品天数:' + 筛选作品天数);
    }
    if (存入谁 === 'lz') {
        logd('存入lz');
        存入环境 = 'tg'
        筛选粉丝数量 = 50000
        筛选作品天数 = 90
        logd('存入环境:' + 存入环境);
        logd('筛选粉丝数量:' + 筛选粉丝数量);
        logd('筛选作品天数:' + 筛选作品天数);
    }

    while (true) {

        if ((模块.获取时间().秒 - 起始时间_成功上传) > 超时秒数_成功上传) {
            logd(超时秒数_成功上传 + ',秒没有成功上传数据,' + '任务超时')
            toast(超时秒数_成功上传 + ',秒没有成功上传数据,' + '任务超时')
            return null
        }

        if ((模块.获取时间().秒 - 起始时间_打开抖音) > 超时秒数_打开抖音) {
            logd('已运行,' + 超时秒数_打开抖音 + '秒,重新打开抖音')
            // toast('已运行,' + 超时秒数_打开抖音 + '秒,重新打开抖音')
            return null
        }

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            logd('团购采集,' + '任务超时')
            // toast('团购采集,' + '任务超时')
            return null
        }

        let 搜索词 = 生成随机地名和姓氏()

        if (!搜索词) {
            continue
        }

        let 进入团购搜索 = 进入团购搜索关键词(搜索词)

        if (进入团购搜索) {
            起始时间 = 模块.获取时间().秒  //重置超时时间
            遍历有团购获取号码()
        }

    }

}

function 安卓原生跳转() {

    if (模块.获取设备id() === 'a1230d2c937b43a0') {

        模块.抖音.意图跳转搜索页面()
        模块.停止脚本()

        importClass(android.content.Intent);
        importClass(android.net.Uri)
        var intent = new Intent();
        intent.setAction("android.intent.action.VIEW");
        intent.setData(Uri.parse("snssdk1128://search"))
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        try {
            context.startActivity(intent);
        } catch (e) {
            loge(e)
        }
        模块.停止脚本()
    }

}

function 异步对话框(标题, 文本) {
    thread.execAsync(function () {
        模块.对话框消息(标题, 文本)
    });
}

function 时时获取位置() {

    return

    logd('时时获取位置');

    if (模块.获取设备id() != 'DVD5T18419001447') {
        return
    }

    logd('设备码:4722a5b,启动时时获取位置');

    importPackage(android.location)
    importPackage(android.content)
    importPackage(android.widget);
    importPackage(android.graphics);
    importPackage(android.view);
    importPackage(android.text);

    /**
     * @作者 Mr_老鬼 QQ:1156346325
     * @函数用途   获取GPS定位信息
     * @创建时间 1:13 2023/3/29
     * @return {JSON}
     **/
    function getLocation() {
        let locationManager = context.getSystemService(Context.LOCATION_SERVICE);
        let locations;
        let providerGPS = android.location.LocationManager.GPS_PROVIDER;
        let providerNetwork = android.location.LocationManager.NETWORK_PROVIDER;
        locations = locationManager.getLastKnownLocation(providerGPS);

        if (locations != null) {
            return {
                "经度": locations.getLongitude() + "",
                "纬度": locations.getLatitude() + "",
                "城市位置": getLocationAddress(locations)
            };
        }
        return null;
    }

    /**
     * @作者 Mr_老鬼 QQ:1156346325
     * @函数用途   地理位置转换城市位置
     * @创建时间 1:11 2023/3/29
     * @param location
     * @return string 城市位置
     **/
    function getLocationAddress(location) {
        let add = "";
        let geoCoder = new Geocoder(context, java.util.Locale.CHINESE);
        try {
            let addresses = geoCoder.getFromLocation(location.getLatitude(), location.getLongitude(), 1);
            if (addresses == null) {
                return "false";
            }
            let address = addresses.get(0);

            let countryName = address.getCountryName();//得到国家名称，比如：中国
            let locality = address.getLocality();//得到城市名称，比如：北京市
            let addressLine = "";
            for (let i = 0; address.getAddressLine(i) != null; i++) {
                addressLine = address.getAddressLine(i) + addressLine;//得到周边信息，包括街道等，i=0，得到街道名称
            }
            add = countryName + locality + addressLine;

        } catch (e) {
            add = "";
            e.printStackTrace();
        }
        return add;
    }

    // 注意授权
    let reqRunttime = requestRuntimePermission(["android.permission.ACCESS_FINE_LOCATION", "android.permission.ACCESS_COARSE_LOCATION"], 10000)
    if (reqRunttime) {

        logd('已有定位权限,启动获取位置线程')

        thread.execAsync(function () {

            let 经度 = null
            let 纬度 = null
            let 城市位置 = null

            while (true) {

                try {

                    let gpsData = getLocation()
                    if (gpsData) {
                        经度 = gpsData["经度"];
                        纬度 = gpsData["纬度"];
                        城市位置 = gpsData["城市位置"]
                        logd(经度, 纬度, 城市位置);
                    } else {
                        logd('没获取到定位');
                    }

                    // logd(gpsData);
                } catch (error) {
                    loge('时时获取位置:' + error);
                }

            }
        });

        // ui.resetUIVar();
        // ui.经度.setText(经度);
        // ui.纬度.setText(纬度);
        // ui.城市位置.setText(城市位置)
    } else {
        logd("获取定位权限失败");
        toast("获取定位权限失败");
    }

}

function 调试设备函数() {

    // 任务_爬种子账号 = true //从巨推宝爬种子账号到自己数据库的开关
    // d9b3a8dd04a8a4d6 摩托拖拉
    // DVD5T18419001447 公司调试设备

    if (模块.获取设备id() === 'DVD5T18419001447') {

        // 模块.数据库.小武_wgq全数据库已存在电话号码(13152304555)
        //
        // exit()

    }

}

function 抖音火山版_主页采集号码() {

    // 进入账号主页以后启动的功能

    logd('抖音火山版_主页采集号码')

    let 超时秒数 = 60
    let 起始时间 = 模块.获取时间().秒

    let 用户昵称 = ''
    let 抖音号 = ''
    let 号码 = ''

    while (true) {

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            logd('抖音火山版_主页采集号码,' + '任务超时')
            toast('抖音火山版_主页采集号码,' + '任务超时')
            return null
        }

        // 起始时间 = 模块.获取时间().秒  //重置超时时间
        // 这里开始往下写代码

        if (!模块.抖音.点击抖音火山_主页联系方式() && !模块.抖音.点击抖音火山_黄色拨号()) {
            return
        }

        // 抖音火山判断号码是否存在主页和数据库
        let 获取号码 = 模块.抖音.抖音火山_确认拨打_手机号码()
        if (!获取号码) {
            return
        }

        号码 = 获取号码

        if (存入谁 === 'wgq') {
            logd('存入谁 === wgq')
            if (模块.数据库.小武_wgq全数据库已存在电话号码(号码)) {
                if (!模块.抖音.返回抖音火山_用户_粉丝数()) {
                    return null
                }
                return null
            }
            logd('重置寻找未重复的数据的超时时间');
            寻找未重复的数据_起始时间 = 模块.获取时间().秒 // 重置寻找未重复的数据的超时时间
        } else if (存入谁 === 'lz') {
            logd('存入谁 === lz')
            if (模块.数据库.小武_兰总全数据库已存在电话号码(号码)) {
                if (!模块.抖音.返回抖音火山_用户_粉丝数()) {
                    return null
                }
                return null
            }
            logd('重置寻找未重复的数据的超时时间');
            寻找未重复的数据_起始时间 = 模块.获取时间().秒 // 重置寻找未重复的数据的超时时间
        } else {
            logd('都不存入');
            if (!模块.抖音.返回抖音火山_用户_粉丝数()) {
                return null
            }
            return null
        }

        if (!模块.抖音.返回抖音火山主页界面()) {
            return
        }
        if (!抖音火山版检查作品是否超过天数(筛选作品天数)) {
            return
        }
        if (!模块.抖音.返回抖音火山主页界面()) {
            return
        }

        let 火山号和昵称 = 抖音火山版获取火山号和昵称()
        logd(火山号和昵称.返回值);

        if (!火山号和昵称.返回值) {
            if (!模块.抖音.返回抖音火山_搜索放大镜()) {
                return
            }
        }

        用户昵称 = 火山号和昵称.火山号火山昵称[1]
        抖音号 = 火山号和昵称.火山号火山昵称[0]

        logd(存入环境, 用户昵称, 抖音号, 号码);

        模块.数据库.小武_上传数据到dy(存入环境, 用户昵称, 抖音号, 号码)

    }

}

function 判断是否需要启动猪蹄() {

    if (模块.贴牌版本() === '猪蹄') {

        logd('猪蹄包名,执行猪蹄');
        toast('猪蹄包名,执行猪蹄');

        while (true) {

            try {
                gqmzj_main()
            } catch (error) {
                loge('猪蹄:' + error);
            }

        }
    }

}

function 判断是否需要启动抖音火山版采集() {

    if (模块.贴牌版本() === '抖音火山版采集') {

        logd('抖音火山版采集包名,执行抖音火山版采集');
        toast('抖音火山版采集包名,执行抖音火山版采集');

        找图初始化()
        申请截图权限()

        线程_检测弹窗()

        模块.抖音.安装抖音火山版()

        while (true) {
            // try {
            let re = 抖音火山版采集()
            if (!re) {
                停止抖音火山版运行()
            }
            // } catch (error) {
            //     loge('抖音火山版采集:' + error);
            // }

        }

    }

}

function 判断是否需要启动团购采集() {

    if (模块.贴牌版本() === '采集') {

        线程_监听抖音异常()

        logd('团购采集包名,执行团购采集命令');
        toast('团购采集包名,执行团购采集命令');
        找图初始化()
        申请截图权限()

        线程_检测弹窗()

        while (true) {
            try {
                let re = 团购采集()
                if (!re) {
                    停止抖音运行()
                }
            } catch (error) {
                loge('团购采集:' + error);
            }

        }

    }

}

// 线程_检测弹窗()
// main();

// 调试设备函数()

// 保活代码()

// 判断是否需要启动抖音火山版采集()
// 判断是否需要启动团购采集()

// 监听正常退出和异常退出
logd('监听正常退出和异常退出');
setStopCallback(function () {
    // pjysdk.CardLogout(); // 调用退出登录
    logd("正常退出,关闭无障碍自动化");
    模块.关闭无障碍自动化()
});
setExceptionCallback(function (msg) {
    // pjysdk.CardLogout(); // 调用退出登录
    logd(" 异常退出: " + msg + ',关闭无障碍自动化');
    模块.关闭无障碍自动化()
});

while (true) {

    // 抖音很多用户反馈会给朋友发私信

    线程_监听乱发私信()

    main();

    // try {
    //     main();
    // } catch (error) {
    //     loge('main:' + error);
    // }
}

function 保活代码() {
    //设置多少周期进行执行一次，在子线程中执行
    let t = setInterval(function () {
        // logd("保活输出...");
    }, 30000);
}

function main() {

    /*if (模块.贴牌版本() === '兰总') {
        logd('判断是否需要重置执行次数');
        if (执行次数 > 2000) {
            logd('执行次数:' + 执行次数 + ',重置为2000');
            // toast('执行次数:' + 执行次数 + ',重置为2000');
            执行次数 = 2000
        }

    }*/

    logd('执行次数:' + 执行次数);
    toast('执行次数:' + 执行次数);

    //  抖音
    if (执行任务 === '智能引流') {
        验证抖音版本是否已适配()
        线程_监听抖音异常()
        while (true) {
            // 模块.关闭干扰窗口()
            智能引流()
        }
    }
    if (执行任务 === '精准引流') {
        验证抖音版本是否已适配()
        线程_监听抖音异常()
        if (模块.贴牌版本() != '兰总') {
            while (true) {
                精准引流_增强()
            }
        } else {
            while (true) {
                精准引流()
            }
        }
    }
    if (执行任务 === '直播场控') {
        验证抖音版本是否已适配()
        线程_监听抖音异常()
        while (true) {
            直播场控()
        }
    }
    if (执行任务 === '粉丝画像引流') {
        验证抖音版本是否已适配()
        线程_监听抖音异常()
        while (true) {
            粉丝画像引流()
        }
    }
    if (执行任务 === '同城引流') {

        验证抖音版本是否已适配()
        线程_监听抖音异常()

        // 线程_监听乱发私信()

        if (模块.贴牌版本() != '兰总') {
            while (true) {
                同城引流_增强()
            }
        } else {
            while (true) {
                同城引流()
            }
        }

    }
    if (执行任务 === '取消视频点赞') {
        验证抖音版本是否已适配()
        线程_监听抖音异常()
        while (true) {
            取消视频点赞()
        }
    }

    //  快手
    if (执行任务 === '快手万能引流') {
        验证快手版本是否已适配()
        线程_监听快手前台()
        while (true) {
            快手万能引流()
        }
    }
    if (执行任务 === '快手同城引流') {
        验证快手版本是否已适配()
        线程_监听快手前台()
        while (true) {
            快手万能引流()
        }
    }

    //  小红书
    if (执行任务 === '小红书万能引流') {
        验证小红书版本是否已适配()
        线程_监听小红书前台()
        while (true) {
            小红书_万能引流()
        }
    }
    if (执行任务 === '小红书同城引流') {
        验证小红书版本是否已适配()
        线程_监听小红书前台()
        while (true) {
            小红书_同城引流()
        }
    }

}

/*
    抖音24.1
    获取大的门店信息
    判断下级节点有就获取
    再次判断,总共就两层
 */
function 采集门店认领信息() {

    //选择 节点 clz=android.widget.ViewGroup 所有节点
    var node = clz("android.view.View").getOneNodeInfo(10000);
    if (node) {
        var x = node.allChildren();
        //这玩意是个数组
        for (let i = 0; i < x.length; i++) {
            logd(x[i])
            logd(x[i].text)
        }
    } else {
        toast("无节点");
    }

}

function 评论区抓取互关用户() {

    任务_爬种子账号 = true

    let 已点用户 = []

    while (true) {
        let arr = 模块.抖音.评论区所有用户头像()
        if (arr) {

            for (let i = 0; i < arr.length; i++) {
                clickPoint((arr[i].bounds.left + arr[i].bounds.right) / 2, (arr[i].bounds.top + arr[i].bounds.bottom) / 2)
                // clickPoint(arr[i].bounds.right, arr[i].bounds.top)
                sleep(模块.抖音.点击延时)

                let 跳过此人 = null
                let 抖音号 = 模块.抖音.抖音号()
                logd('抖音号:' + 抖音号);
                if (抖音号) {
                    for (let i = 0; i < 已点用户.length; i++) {
                        if (抖音号 === 已点用户[i]) {
                            logd(抖音号 + ',用户已经点击过了,跳过此人');
                            跳过此人 = true
                            break
                        }
                    }
                    已点用户.push(抖音号)
                }

                if (跳过此人) {
                    if (!模块.抖音.返回评论界面()) {
                        return null
                    }
                    continue
                }

                function 判断关注数量和粉丝数量符合要求() {

                    // 关注数量>粉丝数量
                    // 10000>粉丝量>2000
                    // 关注量<8000

                    logd('判断关注数量和粉丝数量符合要求');

                    let 粉丝数量 = 模块.抖音.获取粉丝数量()
                    if (!粉丝数量) {
                        return
                    }

                    let 关注数量 = 模块.抖音.关注数量()
                    if (!关注数量) {
                        return
                    }

                    logd('关注数量:' + 关注数量);
                    logd('粉丝数量:' + 粉丝数量);

                    if (关注数量 >= 粉丝数量 && 粉丝数量 >= 2000 && 粉丝数量 < 10000 && 关注数量 < 8000) {
                        return true
                    }

                }

                if (!判断关注数量和粉丝数量符合要求()) {

                    logd('关注数量和粉丝数量不符合要求,返回寻找下一个用户');
                    toast('关注数量和粉丝数量不符合要求,返回寻找下一个用户');

                    if (!模块.抖音.返回评论界面()) {
                        return null
                    }
                    continue
                }

                logd('关注数量和粉丝数量符合要求,继续下一步操作');
                toast('关注数量和粉丝数量符合要求,继续下一步操作');

                if (任务_爬种子账号) {
                    if (模块.抖音.点击粉丝()) {
                        if (!模块.抖音.粉丝列表界面()) {
                            // 模块.气泡弹窗('粉丝列表不可见')
                            // 日志悬浮窗.日志('粉丝列表不可见')
                            if (!模块.抖音.返回评论界面()) {
                                return null
                            }
                            continue
                        }


                        back()
                        sleep(1500);
                    }


                    let 抖音号 = 模块.抖音.抖音号()
                    logd('抖音号:' + 抖音号);
                    if (抖音号) {
                        模块.数据库.存数据(抖音号)
                    }
                    if (!模块.抖音.返回评论界面()) {
                        return null
                    }
                    continue
                }

            }

            模块.纵向滑动屏幕(0.8, 0)
            sleep(2000)
        }
    }
}

function 快手万能引流() {

    logd('快手 (万能||同城) 引流')

    let 超时秒数 = 30   // 目前没有效果,不带纠正功能
    let 起始时间 = 模块.获取时间().秒

    while (true) {

        有操作 = null

        if (模块.抖音.计算百分比概率(关注概率)) {
            // 模块.气泡弹窗('概率值:' + 关注概率 + ',触发关注事件')
            if (模块.快手.点击视频关注()) {
                有操作 = true
            }
        }

        if (模块.抖音.计算百分比概率(点赞概率)) {
            // 模块.气泡弹窗('概率值:' + 关注概率 + ',触发关注事件')
            if (模块.快手.点击视频点赞()) {
                有操作 = true
            }
        }

        logd('计算评论点赞概率');
        if (模块.抖音.计算百分比概率(评论点赞概率)) {
            // 模块.气泡弹窗('概率值:' + 评论点赞概率 + ',触发评论点赞事件')
            // 日志悬浮窗.日志('概率值:' + 评论点赞概率 + ',触发评论点赞事件')
            logd('概率值:' + 评论点赞概率 + ',触发评论点赞事件')
            模块.快手.点击评论区按钮()
            if (模块.快手.点击评论区所有爱心()) {
                有操作 = true
            }
        }

        logd('计算评论概率');
        if (模块.抖音.计算百分比概率(评论概率)) {
            // 模块.气泡弹窗('概率值:' + 评论概率 + ',触发评论事件')
            // 日志悬浮窗.日志('概率值:' + 评论概率 + ',触发评论事件')
            logd('概率值:' + 评论概率 + ',触发评论事件')
            模块.快手.点击评论区按钮()
            if (模块.快手.点击评论输入框()) {
                let 话术 = 模块.随机获取数组元素(评论话术, '#')
                logd('话术:' + 话术)
                快手评论输入账号(话术)
                sleep(2000)
            }
            if (模块.快手.点击输入框发送()) {
                有操作 = true
            }
        }

        // 模块.刷新控件缓存()
        // 模块.强制刷新节点()

        if (有操作) {
            已操作次数 = 已操作次数 + 1
            // 模块.气泡弹窗('已操作次数:' + 已操作次数)
            // 日志悬浮窗.日志('已操作次数:' + 已操作次数)
            logd('已操作次数:' + 已操作次数)

            if (已操作次数 >= 执行次数) {
                取消所有正在运行的线程()
                模块.对话框消息('提示', '已操作次数:' + 已操作次数 + ',设定的执行次数已完成')
                模块.停止脚本()
            }
        }

        if (!模块.快手.返回播放视频页面()) {
            return null
        }

        模块.纵向滑动屏幕(0.8, 0)
        sleep(2000)

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            // 模块.气泡弹窗('操作粉丝列表用户,' + '任务超时')
            logd('快手万能引流,' + '任务超时')
            // toast('快手万能引流,' + '任务超时')
            return null
        }

    }

}

function 线程_检测弹窗() { // 没有正式调用,要看情况

    logd('线程_检测弹窗_稍后_关闭应用,周期执行')

    let 周期_检测弹窗_稍后_关闭应用 = setInterval(function () {

        模块.关闭干扰窗口()

    }, 5000);

    // logd('线程_检测弹窗_稍后_关闭应用')
    // thread.execAsync(function () {
    //     while (true) {
    //         模块.关闭干扰窗口()
    //         sleep(5000)
    //     }
    // });
}

function 线程_监听小红书前台() {

    return

    logd('线程_监听小红书前台')
    thread.execAsync(function () {
        while (true) {
            if (getRunningPkgEx() != 小红书包名) {
                logd('小红书不在前台,唤醒小红书');
                模块.小红书.打开小红书()
            }
            sleep(500)
        }
    });
}

function 线程_监听快手前台() {
    logd('线程_监听快手前台')
    thread.execAsync(function () {
        while (true) {
            if (getRunningPkgEx() != 快手包名) {
                logd('快手不在前台,唤醒快手');
                模块.快手.打开快手()
            }
            sleep(500)
        }
    });
}

function 线程_监听乱发私信() {

    logd('线程_监听乱发私信,周期执行')

    // try {

    let 周期_监听抖音异常 = setInterval(function () {

        if (模块.抖音.私信给朋友()) {
            back()
            sleep(2000);
        }

    }, 2000);

    // } catch (error) {
    //
    //     loge('周期_监听抖音异常:' + error);
    //
    // }


    // let 周期_监听抖音异常 = setInterval(function () {
    //
    //     检测验证码()
    //
    //     模块.关闭干扰窗口()
    //
    //     // if (getRunningPkgEx() != 抖音包名) {
    //     //     logd('抖音不在前台,唤醒抖音');
    //     //     模块.抖音.打开抖音()
    //     // }
    //
    // }, 5000);

    // logd('线程_监听抖音异常')
    // thread.execAsync(function () {
    //
    //     while (true) {
    //
    //         检测验证码()
    //
    //         if (getRunningPkgEx() != 抖音包名) {
    //             logd('抖音不在前台,唤醒抖音');
    //             模块.抖音.打开抖音()
    //         }
    //
    //         // if (模块.抖音.请完成下列验证()) {
    //         //     // 取消所有正在运行的线程()    //自己就是多线程,不能取消自己
    //         //     模块.对话框消息('警告!', '出现了验证码,手动处理完再继续运行')
    //         //     模块.停止脚本()
    //         // }
    //
    //         sleep(1000)
    //     }
    //
    // });
}

function 线程_监听抖音异常() {

    logd('线程_监听抖音异常,周期执行')

    // try {

    let 周期_监听抖音异常 = setInterval(function () {

        检测验证码()

        // 模块.关闭干扰窗口()

        // if (getRunningPkgEx() != 抖音包名) {
        //     logd('抖音不在前台,唤醒抖音');
        //     模块.抖音.打开抖音()
        // }

    }, 2000);

    // } catch (error) {
    //
    //     loge('周期_监听抖音异常:' + error);
    //
    // }


    // let 周期_监听抖音异常 = setInterval(function () {
    //
    //     检测验证码()
    //
    //     模块.关闭干扰窗口()
    //
    //     // if (getRunningPkgEx() != 抖音包名) {
    //     //     logd('抖音不在前台,唤醒抖音');
    //     //     模块.抖音.打开抖音()
    //     // }
    //
    // }, 5000);

    // logd('线程_监听抖音异常')
    // thread.execAsync(function () {
    //
    //     while (true) {
    //
    //         检测验证码()
    //
    //         if (getRunningPkgEx() != 抖音包名) {
    //             logd('抖音不在前台,唤醒抖音');
    //             模块.抖音.打开抖音()
    //         }
    //
    //         // if (模块.抖音.请完成下列验证()) {
    //         //     // 取消所有正在运行的线程()    //自己就是多线程,不能取消自己
    //         //     模块.对话框消息('警告!', '出现了验证码,手动处理完再继续运行')
    //         //     模块.停止脚本()
    //         // }
    //
    //         sleep(1000)
    //     }
    //
    // });
}

// function 打开快手() {
//     utils.openAppByName("快手");
// }
//
// function 打开抖音() {
//     utils.openAppByName("抖音");
// }

function 取消视频点赞() {

    while (true) {
        if (模块.抖音.取消视频点赞()) {
            已操作次数 = 已操作次数 + 1
            // 模块.气泡弹窗('已操作次数:' + 已操作次数)
            // 日志悬浮窗.日志('已操作次数:' + 已操作次数)
            logd('已操作次数:' + 已操作次数)

            if (已操作次数 >= 执行次数) {
                取消所有正在运行的线程()
                模块.对话框消息('提示', '已操作次数:' + 已操作次数 + ',设定的执行次数已完成')
                模块.停止脚本()
            }
        }
        模块.纵向滑动屏幕(0.8, 0)
        sleep(2000)
    }

}

function 评论区所有用户关注() {

    logd('评论区所有用户关注');
    toast('评论区所有用户关注');

    if (!模块.抖音.计算百分比概率(关注概率)) {
        return
    }

    let arr = 模块.抖音.评论区所有用户头像()
    if (arr) {

        for (let i = 0; i < arr.length; i++) {
            clickPoint((arr[i].bounds.left + arr[i].bounds.right) / 2, (arr[i].bounds.top + arr[i].bounds.bottom) / 2)
            sleep(模块.抖音.点击延时)
            // 模块.抖音.点击用户头像()
            if (模块.抖音.点击主页_关注()) {
                有操作 = true
                统计有操作次数()

            }
            模块.抖音.返回评论界面()
        }
    }
}

function 评论区所有用户头像点赞() {

    logd('评论区所有用户头像点赞');
    toast('评论区所有用户头像点赞');

    let arr = 模块.抖音.评论区所有用户头像()
    if (arr) {

        for (let i = 0; i < arr.length; i++) {
            clickPoint((arr[i].bounds.left + arr[i].bounds.right) / 2, (arr[i].bounds.top + arr[i].bounds.bottom) / 2)
            sleep(模块.抖音.点击延时)
            模块.抖音.点击用户头像()
            if (模块.抖音.点击点赞()) {
                有操作 = true
                统计有操作次数()

            }
            模块.抖音.返回评论界面()
        }
    }
}

function 评论区所有用户作品点赞() {

    logd('评论区所有用户作品点赞');
    toast('评论区所有用户作品点赞');

    let arr = 模块.抖音.评论区所有用户头像()
    if (arr) {

        for (let i = 0; i < arr.length; i++) {
            clickPoint((arr[i].bounds.left + arr[i].bounds.right) / 2, (arr[i].bounds.top + arr[i].bounds.bottom) / 2)
            // clickPoint(arr[i].bounds.right, arr[i].bounds.top)
            sleep(模块.抖音.点击延时)
            模块.抖音.点击第一个作品()
            if (模块.抖音.点击视频点赞()) {
                有操作 = true
                统计有操作次数()

            }
            模块.抖音.返回评论界面()
        }
    }
}

function 评论区所有用户作品收藏() {

    logd('评论区所有用户作品收藏');
    toast('评论区所有用户作品收藏');

    let arr = 模块.抖音.评论区所有用户头像()
    if (arr) {

        for (let i = 0; i < arr.length; i++) {
            clickPoint((arr[i].bounds.left + arr[i].bounds.right) / 2, (arr[i].bounds.top + arr[i].bounds.bottom) / 2)
            // clickPoint(arr[i].bounds.right, arr[i].bounds.top)
            sleep(模块.抖音.点击延时)
            模块.抖音.点击第一个作品()
            if (模块.抖音.点击视频收藏()) {
                有操作 = true
                统计有操作次数()

            }
            模块.抖音.返回评论界面()
        }
    }
}

function 评论区所有评论点赞() {

    logd('评论区所有评论点赞');
    toast('评论区所有评论点赞');

    if (模块.抖音.点击评论区所有爱心()) {
        有操作 = true
        统计有操作次数()

    }
    模块.抖音.返回评论界面()
}

function 评论() {

    logd('评论');
    toast('评论');

    // keepNode(true)

    if (!模块.抖音.计算百分比概率(评论概率)) {
        return
    }

    if (模块.抖音.点击评论输入框()) {
        let 话术 = 模块.随机获取数组元素(评论话术, '#')
        logd('话术:' + 话术)
        // keepNode(true)
        评论输入账号(话术)
        sleep(2000)
        /* back()
        sleep(2500) */

        // keepNode(true)

        if (模块.抖音.点击评论输入框发送()) {
            有操作 = true
            统计有操作次数()
        }
    }

}

function 统计有操作次数() {

    if (有操作) {

        已操作次数 = 已操作次数 + 1
        // 模块.气泡弹窗('已操作次数:' + 已操作次数)
        if (已操作次数 >= 执行次数) {
            取消所有正在运行的线程()
            模块.对话框消息('提示', '已操作次数:' + 已操作次数 + ',设定的执行次数已完成')
            模块.停止脚本()
        }
        logd('已操作次数:' + 已操作次数);
        toast('已操作次数:' + 已操作次数);
        //重新计算超时时间
        // 起始时间 = 模块.获取时间().秒
    }
}

function 同城错误处理() { //注意不要共用

    logd('同城错误处理');
    // toast('同城错误处理');
    // 模块.抖音.返回抖音首页()
    // 模块.抖音.意图跳转搜索页面()

    if (模块.抖音.播放速度()) {
        back()
        sleep(2000);
    }

    if (模块.贴牌版本() != '兰总') {
        // 创建文件
        // file.create("/sdcard/城市.txt");
        logd('进入指定同城')

        let 超时秒数 = 60
        let 起始时间 = 模块.获取时间().秒

        while (true) {

            if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
                logd('进入指定同城,' + '任务超时')
                // toast('进入指定同城,' + '任务超时')
                return null
            }

            // 起始时间 = 模块.获取时间().秒  //重置超时时间
            // 这里开始往下写代码
            模块.抖音.意图跳转同城()
            if (模块.抖音.进入指定同城()) {
                起始时间 = 模块.获取时间().秒 // 重置一下超时时间
                break
            }

        }
    } else {
        模块.抖音.意图跳转同城()
    }

    模块.纵向滑动屏幕(0.6, 0)
    sleep(2000)
    模块.纵向滑动屏幕(0.6, 0)
    sleep(3000)
}

function 返回首页切换下一个视频() {
    logd('返回首页,切换下一个视频');
    // 返回首页,切换下一个视频
    // 模块.抖音.点击关闭评论()
    if (模块.抖音.评论_表情()) {
        模块.抖音.点击关闭评论()
    }
    if (有操作) {
        back()
        sleep(3000);
    }
    模块.纵向滑动屏幕(0.8, 0)
    sleep(3000)
    // keepNode(true)
    // 模块.抖音.点击关闭评论()
}

function 返回评论区_返回几次(ii) {
    for (let i = 0; i < ii; i++) {
        // console.info(i);
        if (模块.抖音.评论区所有用户头像()) {
            return true
        }
        logd('返回次数:' + (i + 1) + ',需要返回次数:' + ii);
        back()
        sleep(2000);
    }
}


function 同城引流_增强() {

    logd('同城引流_增强');
    // toast('同城引流_增强');

    let re = main()
    if (!re) {
        同城错误处理()
        模块.抖音.点击同城_四宫格_用户名()
    }

    function main() {

        let 超时秒数 = 40 //暂时调高,待定
        let 起始时间 = 模块.获取时间().秒

        let 返回次数 = 0

        while (true) {

            if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
                // 模块.气泡弹窗('同城引流,' + '任务超时')
                logd('同城引流_增强,' + '任务超时')
                // toast('同城引流_增强,' + '任务超时')
                return null
            }

            有操作 = null

            // let 已点评论 = null


            if (!模块.抖音.点击视频评论()) {
                // return null
                // 返回首页切换下一个视频()
                if (!模块.抖音.返回抖音首页()) {
                    return null
                }
                模块.纵向滑动屏幕(0.8, 0)
                sleep(3000)
                continue
            }

            // if (模块.抖音.评论区所有用户头像()) {
            //     logd('往下拉动评论区');
            //     模块.纵向滑动屏幕(0.8, 0)
            //     sleep(2000)
            //     模块.纵向滑动屏幕(0.8, 0)
            //     sleep(2000)
            // }
            //
            //
            // let arr = 模块.抖音.评论区所有用户头像()
            // if (arr) {
            //
            //     for (let i = 0; i < arr.length; i++) {
            //
            //         同城_增强_计数++
            //         if (同城_增强_计数 > 6) { //有几个switch就填多少个
            //             同城_增强_计数 = 1
            //         }
            //
            //         logd('同城_增强_计数:' + 同城_增强_计数);
            //
            //         switch (同城_增强_计数) {
            //             case 1:
            //                 logd('评论区所有用户作品收藏');
            //                 // 模块.抖音.返回评论界面()
            //                 logd('点击第:' + i + '个用户头像');
            //                 if (模块.抖音.评论区所有用户头像()) {
            //                     clickPoint((arr[i].bounds.left + arr[i].bounds.right) / 2, (arr[i].bounds.top + arr[i].bounds.bottom) / 2)
            //                     sleep(模块.抖音.点击延时)
            //                     返回次数 = 1
            //                     if (模块.抖音.点击第一个作品()) {
            //                         返回次数 = 2
            //                     }
            //                     if (模块.抖音.点击视频收藏()) {
            //                         返回次数 = 2
            //                         有操作 = true
            //                     }
            //                     返回评论区_返回几次(返回次数)
            //                     // 模块.抖音.返回评论界面()
            //                 }
            //                 // clickPoint((arr[i].bounds.left + arr[i].bounds.right) / 2, (arr[i].bounds.top + arr[i].bounds.bottom) / 2)
            //                 // clickPoint(arr[i].bounds.right, arr[i].bounds.top)
            //                 // sleep(模块.抖音.点击延时)
            //                 // 模块.抖音.点击第一个作品()
            //                 // if (模块.抖音.点击视频收藏()) {
            //                 //     有操作 = true
            //                 // }
            //                 // 评论区所有用户作品收藏()
            //                 break;
            //             case 2:
            //                 logd('评论区所有用户头像点赞');
            //                 // 模块.抖音.返回评论界面()
            //                 logd('点击第:' + i + '个用户头像');
            //                 if (模块.抖音.评论区所有用户头像()) {
            //                     clickPoint((arr[i].bounds.left + arr[i].bounds.right) / 2, (arr[i].bounds.top + arr[i].bounds.bottom) / 2)
            //                     sleep(模块.抖音.点击延时)
            //                     返回次数 = 1
            //                     if (模块.抖音.点击用户头像()) {
            //                         返回次数 = 2
            //                     }
            //                     if (模块.抖音.点击点赞()) {
            //                         返回次数 = 2
            //                         有操作 = true
            //                     }
            //                     返回评论区_返回几次(返回次数)
            //                 }
            //                 // clickPoint((arr[i].bounds.left + arr[i].bounds.right) / 2, (arr[i].bounds.top + arr[i].bounds.bottom) / 2)
            //                 // sleep(模块.抖音.点击延时)
            //                 // 模块.抖音.点击用户头像()
            //                 // if (模块.抖音.点击点赞()) {
            //                 //     有操作 = true
            //                 // }
            //                 // 评论区所有用户头像点赞()
            //                 break;
            //             case 3:
            //                 logd('评论区所有用户作品点赞');
            //                 // 模块.抖音.返回评论界面()
            //                 logd('点击第:' + i + '个用户头像');
            //                 if (模块.抖音.评论区所有用户头像()) {
            //                     clickPoint((arr[i].bounds.left + arr[i].bounds.right) / 2, (arr[i].bounds.top + arr[i].bounds.bottom) / 2)
            //                     sleep(模块.抖音.点击延时)
            //                     返回次数 = 1
            //                     if (模块.抖音.点击第一个作品()) {
            //                         返回次数 = 2
            //                     }
            //                     if (模块.抖音.点击视频点赞()) {
            //                         返回次数 = 2
            //                         有操作 = true
            //                     }
            //                     返回评论区_返回几次(返回次数)
            //                     // 模块.抖音.返回评论界面()
            //                 }
            //                 // clickPoint((arr[i].bounds.left + arr[i].bounds.right) / 2, (arr[i].bounds.top + arr[i].bounds.bottom) / 2)
            //                 // clickPoint(arr[i].bounds.right, arr[i].bounds.top)
            //                 // sleep(模块.抖音.点击延时)
            //                 // 模块.抖音.点击第一个作品()
            //                 // if (模块.抖音.点击视频点赞()) {
            //                 //     有操作 = true
            //                 // }
            //                 // 评论区所有用户作品点赞()
            //                 break;
            //             case 4:
            //                 logd('评论区所有用户关注');
            //                 // 模块.抖音.返回评论界面()
            //                 logd('点击第:' + i + '个用户头像');
            //                 if (模块.抖音.评论区所有用户头像()) {
            //                     clickPoint((arr[i].bounds.left + arr[i].bounds.right) / 2, (arr[i].bounds.top + arr[i].bounds.bottom) / 2)
            //                     sleep(模块.抖音.点击延时)
            //                     返回次数 = 1
            //                     // 模块.抖音.点击用户头像()
            //                     if (模块.抖音.点击主页_关注()) {
            //                         有操作 = true
            //                     }
            //                     返回评论区_返回几次(返回次数)
            //                     // 模块.抖音.返回评论界面()
            //                 }
            //                 // clickPoint((arr[i].bounds.left + arr[i].bounds.right) / 2, (arr[i].bounds.top + arr[i].bounds.bottom) / 2)
            //                 // sleep(模块.抖音.点击延时)
            //                 // // 模块.抖音.点击用户头像()
            //                 // if (模块.抖音.点击主页_关注()) {
            //                 //     有操作 = true
            //                 // }
            //                 // 评论区所有用户关注()
            //                 break;
            //             case 5:
            //                 logd('评论区所有评论点赞');
            //                 // 模块.抖音.返回评论界面()
            //                 logd('点击第:' + i + '个用户评论爱心');
            //                 if (模块.抖音.评论区所有用户头像()) {
            //                     模块.抖音.点击评论区第几个爱心(i)
            //                 }
            //                 // 模块.抖音.点击评论区第几个爱心(i)
            //                 // 评论区所有评论点赞()
            //                 break;
            //             case 6:
            //                 logd('评论');
            //                 // 模块.抖音.返回评论界面()
            //                 if (模块.抖音.评论区所有用户头像()) {
            //                     评论()
            //                 }
            //                 // 评论()
            //                 break;
            //             default:
            //             //
            //         }
            //
            //         统计有操作次数()
            //
            //         // 模块.抖音.返回评论界面()
            //
            //         if (有操作) {
            //             起始时间 = 模块.获取时间().秒 // 重置超时时间
            //             // 模块.抖音.点击关闭评论()
            //             // back()
            //             // sleep(3000);
            //         }
            //
            //         // 有操作 = null
            //
            //         // 模块.抖音.返回评论界面()
            //     }
            // }

            同城_增强_计数++
            if (同城_增强_计数 > 6) { //有几个switch就填多少个
                同城_增强_计数 = 1
            }

            有操作 = null

            switch (同城_增强_计数) {
                case 1:
                    评论区所有用户作品收藏()
                    break;
                case 2:
                    评论区所有用户头像点赞()
                    break;
                case 3:
                    评论区所有用户作品点赞()
                    break;
                case 4:
                    评论区所有评论点赞()
                    break;
                case 5:
                    评论()
                    break;
                case 6:
                    评论区所有用户关注()
                    break;
                default:
                //
            }

            统计有操作次数()

            if (有操作) {
                logd('重置超时时间');
                起始时间 = 模块.获取时间().秒 // 重置超时时间
            }

            if (!模块.抖音.返回抖音首页()) {
                return null
            }

            // 模块.纵向滑动屏幕(0.8, 0)
            // sleep(3000)
            //
            // // 返回首页切换下一个视频()
            //
            // if (模块.抖音.获取粉丝数量()) {
            //     模块.抖音.点击左上角返回()
            // }

            if (!模块.抖音.同城下滑视频_检测异常界面()) {
                return null
            }

        }
    }
}

function 同城引流() {

    // let re = main()
    // if (!re) {
    //     模块.抖音.返回抖音首页()
    //     模块.纵向滑动屏幕(0.6, 0)
    //     sleep(2000)
    // }

    let re = main()
    if (!re) {
        同城错误处理()
    }

    function main() {

        let 超时秒数 = 40   //时间待定
        let 起始时间 = 模块.获取时间().秒

        while (true) {

            let 有操作 = null
            let 已点评论 = null

            keepNode(true)

            if (模块.抖音.播放速度()) {
                back()
                sleep(2000);
            }

            if (模块.贴牌版本() === '兰总') {
                logd('当前概率:' + 关注概率 + ',重置为0');
                关注概率 = 0
            }

            if (模块.抖音.计算百分比概率(关注概率)) {
                // 模块.气泡弹窗('概率值:' + 关注概率 + ',触发关注事件')


                if (模块.抖音.点击视频关注()) {
                    有操作 = true
                }

            }

            if (模块.贴牌版本() === '兰总') {
                if (点赞概率 > 70) {
                    logd('当前概率:' + 点赞概率 + ',重置为70');
                    点赞概率 = 70
                }

            }

            if (模块.抖音.计算百分比概率(点赞概率)) {
                // 模块.气泡弹窗('概率值:' + 点赞概率 + ',触发点赞事件')

                if (模块.抖音.点击视频点赞()) {
                    有操作 = true
                }

            }

            if (模块.贴牌版本() === '兰总') {
                if (评论概率 > 10) {
                    logd('当前概率:' + 评论概率 + ',重置为10');
                    评论概率 = 10
                }

            }

            if (模块.抖音.计算百分比概率(评论概率)) {
                // 模块.气泡弹窗('概率值:' + 评论概率 + ',触发评论事件')


                if (模块.抖音.点击视频评论()) {
                    // 有操作 = true
                    已点评论 = true
                }

                if (已点评论) {

                    // keepNode(true)
                    //
                    // if (模块.抖音.计算百分比概率(评论点赞概率)) {
                    //     // 模块.气泡弹窗('概率值:' + 评论点赞概率 + ',触发评论点赞事件')
                    //     // 日志悬浮窗.日志('概率值:' + 评论点赞概率 + ',触发评论点赞事件')
                    //     logd('概率值:' + 评论点赞概率 + ',触发评论点赞事件')
                    //
                    //     releaseNode()
                    //     if (模块.抖音.点击评论区所有爱心()) {
                    //         有操作 = true
                    //     }
                    // }

                    keepNode(true)

                    if (模块.抖音.点击评论输入框()) {
                        let 话术 = 模块.随机获取数组元素(评论话术, '#')
                        logd('话术:' + 话术)
                        keepNode(true)
                        评论输入账号(话术)
                        sleep(2000)
                        /* back()
                        sleep(2500) */

                        keepNode(true)

                        if (模块.抖音.点击评论输入框发送()) {
                            有操作 = true
                        }
                    }
                    if (!模块.抖音.返回抖音首页()) {
                        return null
                    }
                }
            }

            keepNode(true)

            if (模块.贴牌版本() === '兰总') {
                if (评论点赞概率 > 70) {
                    logd('当前概率:' + 评论点赞概率 + ',重置为70');
                    评论点赞概率 = 70
                }

            }

            if (模块.抖音.计算百分比概率(评论点赞概率)) {
                // 模块.气泡弹窗('概率值:' + 评论点赞概率 + ',触发评论点赞事件')
                // 日志悬浮窗.日志('概率值:' + 评论点赞概率 + ',触发评论点赞事件')


                logd('概率值:' + 评论点赞概率 + ',触发评论点赞事件')
                if (!已点评论) {
                    模块.抖音.点击视频评论()
                }
                releaseNode()
                if (模块.抖音.点击评论区所有爱心()) {
                    有操作 = true
                }
            }

            if (有操作) {

                起始时间 = 模块.获取时间().秒 //重置超时时间

                已操作次数 = 已操作次数 + 1
                // 模块.气泡弹窗('已操作次数:' + 已操作次数)
                if (已操作次数 >= 执行次数) {
                    取消所有正在运行的线程()
                    模块.对话框消息('提示', '已操作次数:' + 已操作次数 + ',设定的执行次数已完成')
                    模块.停止脚本()
                }
                //重新计算超时时间
                // 起始时间 = 模块.获取时间().秒
            }

            // if (!模块.抖音.点击进入直播间按钮()) {
            //     模块.抖音.返回抖音首页()
            // }

            // 模块.抖音.点击关闭评论()
            // 模块.纵向滑动屏幕(0.8, 0)
            // sleep(2000)
            // keepNode(true)
            // 模块.抖音.点击关闭评论()
            //
            // if (模块.抖音.播放速度()) {
            //     back()
            //     sleep(2000);
            // }
            //
            // if (模块.抖音.获取粉丝数量()) {
            //     模块.抖音.点击左上角返回()
            // }

            if (!模块.抖音.同城下滑视频_检测异常界面()) {
                return null
            }

            if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
                // 模块.气泡弹窗('同城引流,' + '任务超时')
                logd('同城引流,' + '任务超时')
                // toast('同城引流,' + '任务超时')
                return null
            }
        }
    }
}

function 粉丝画像引流() {
    let re = 操作粉丝列表用户()
    if (!re) {
        模块.抖音.返回粉丝列表()
    }
}

function 直播场控() {

    let 礼物感谢 = null
    if (配置对象.直播场控_礼物感谢 === true) {
        礼物感谢 = true
    }
    let 进场欢迎 = null
    if (配置对象.直播场控_进场欢迎 === true) {
        进场欢迎 = true
    }
    let 自动喊话 = null
    if (配置对象.直播场控_自动喊话 === true) {
        自动喊话 = true
    }

    let 休息时间低 = 配置对象.直播场控_休息时间低 * 1000
    let 休息时间高 = 配置对象.直播场控_休息时间高 * 1000

    let 最后一个来了 = ''
    let 最后一个送礼物 = ''

    while (true) {

        有操作 = null

        if (礼物感谢) {
            logd('礼物感谢');
            let 直播间_收到礼物 = 模块.抖音.直播间_收到礼物()
            if (直播间_收到礼物) {
                if (直播间_收到礼物 != 最后一个送礼物) {
                    最后一个送礼物 = 直播间_收到礼物
                    // 模块.气泡弹窗('检测到有用户送出礼物')
                    评论('谢谢大家送的礼物')
                    有操作 = true
                }

            }
        }
        if (进场欢迎) {
            logd('进场欢迎');
            let 直播间_来了 = 模块.抖音.直播间_来了()
            if (直播间_来了) {
                if (直播间_来了 != 最后一个来了) {
                    最后一个来了 = 直播间_来了
                    // 模块.气泡弹窗('检测到有新用户进入直播间')
                    评论('欢迎  ' + 直播间_来了 + '  进入直播间')
                    有操作 = true
                }

            }
        }
        if (自动喊话) {
            logd('自动喊话');
            let 话术 = 模块.随机获取数组元素(评论话术, '#')
            logd('话术:' + 话术)
            评论(话术)
            有操作 = true
        }

        if (有操作) {
            已操作次数 = 已操作次数 + 1
            // 模块.气泡弹窗('已操作次数:' + 已操作次数)
            if (已操作次数 >= 执行次数) {
                取消所有正在运行的线程()
                模块.对话框消息('提示', '已操作次数:' + 已操作次数 + ',设定的执行次数已完成')
                模块.停止脚本()
            }
            模块.随机毫秒等待(休息时间低, 休息时间高)
        }

        //sleep(1000)
    }

    function 评论(话术) {

        let 超时秒数 = 3    //正常流程很快,时间需要调短
        let 起始时间 = 模块.获取时间().秒

        while (true) {

            // 模块.抖音.点击直播间_更多()
            //模块.抖音.点击直播间_评论输入框()

            // 模块.抖音.点击直播间_评论()
            if (模块.抖音.点击直播间_评论输入框()) {
                直播间_输入话术(话术)
                sleep(2000)
                if (模块.抖音.点击直播间_发送()) {
                    return true
                }
            }

            if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
                logd('评论,' + '任务超时')
                // toast('评论,' + '任务超时')
                return null
            }

        }
    }
}

function 抖音火山版搜索_输入话术(a) {
    if (!a) {
        logd('读取a的值无法识别');
        return
    }
    let str = a.toString()
    logd('抖音火山版搜索_输入话术:' + str)
    模块.强制刷新节点()
    inputText(clz("android.widget.EditText"), str)
}

function 团购搜索_输入话术(a) {
    if (!a) {
        logd('读取a的值无法识别');
        return
    }
    let str = a.toString()
    logd('团购搜索_输入话术:' + str)
    模块.强制刷新节点()
    inputText(clz("android.widget.EditText"), str)
}

function 直播间_输入话术(a) {
    if (!a) {
        logd('读取a的值无法识别');
        return
    }
    let str = a.toString()
    logd('直播间_输入话术:' + str)
    模块.强制刷新节点()
    inputText(clz("android.widget.EditText"), str)
}

function 爬种子账号() {

    任务_爬种子账号 = true
    let 超时秒数 = 20
    let 起始时间 = 模块.获取时间().秒
    // let 跳转异常次数 = 0

    while (true) {

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            // 模块.气泡弹窗('智能引流,' + '任务超时')
            // 日志悬浮窗.日志('智能引流,' + '任务超时')
            logd('爬种子账号,' + '任务超时')
            // toast('爬种子账号,' + '任务超时')
            return null
        }

        let 种子用户 = true //模块.抖音.获取种子用户()
        if (种子用户) {
            种子用户 = 种子用户 + ''
            // 模块.气泡弹窗('' + 种子用户)
            // 日志悬浮窗.日志('' + 种子用户)
            logd(种子用户)
            // 模块.抖音.意图跳转搜索页面()
            let re = null
            if (!模块.抖音.粉丝列表所有用户()) {
                re = 模块.抖音.意图跳转搜索结果('dylnbqrzqgrc')   // 模块.抖音.点击搜索框()
            } else {
                re = true
            }

            if (re) {
                //重新赋值时间,重新计算超时时间
                起始时间 = 模块.获取时间().秒
                // 模块.气泡弹窗('成功进入搜索页面')
                // 日志悬浮窗.日志('成功进入搜索页面')
                // 输入账号(种子用户)
                // 输入账号('51270507770')
                //re.setText(种子用户)
                // sleep(3000)
                let re2 = 进入粉丝列表()
                if (re2 === '点击搜索失败') {
                    取消所有正在运行的线程()
                    模块.对话框消息('警告!!', '无障碍权限异常!!,请重启手机继续运行')
                    模块.停止脚本()
                }
                if (!re2) {
                    // 跳转异常次数++
                    // if (跳转异常次数 >= 20) {
                    //     取消所有正在运行的线程()
                    //     模块.对话框消息('警告!!', '连续' + 跳转异常次数 + '次搜索失败,运行异常!!停止运行!!,请检查无障碍无障碍权限,建议手机重启再继续运行')
                    //     停止脚本()
                    // }
                    continue
                } else {
                    // 跳转异常次数 = 0
                }
                起始时间 = 模块.获取时间().秒  //重置超时时间
                // 模块.气泡弹窗('成功进入粉丝列表')
                // 日志悬浮窗.日志('成功进入粉丝列表')
                if (模块.抖音.粉丝0_粉丝列表()) {
                    logd('粉丝数量0,获取下一个')
                    toast1('粉丝数量0,获取下一个')
                    continue
                }
                let re = 操作粉丝列表用户()
                if (!re) {

                }
            }
        } else {
            // 模块.气泡弹窗('失败:' + 种子用户)
            // 日志悬浮窗.日志('失败:' + 种子用户)
            sleep(2000)
            continue
        }

    }
}

function 精准引流_增强() {

    // let re = 操作粉丝列表用户()
    // if (!re) {
    //
    // }

    logd('精准引流_增强');

    let 超时秒数 = 20
    let 起始时间 = 模块.获取时间().秒
    // let 跳转异常次数 = 0

    let arr_截流 = []
    // let 精准引流_增强_下标 = 0
    // let 精准引流_增强_截流对象 = 截流抖音号

    // let 截流对象 = 截流抖音号

    while (true) {

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            // 模块.气泡弹窗('智能引流,' + '任务超时')
            // 日志悬浮窗.日志('智能引流,' + '任务超时')
            logd('精准引流_增强,' + '任务超时')
            // toast('精准引流_增强,' + '任务超时')
            return null
        }

        种子用户 = true //模块.抖音.获取种子用户()

        if (种子用户) {
            种子用户 = 种子用户 + ''
            // 模块.气泡弹窗('' + 种子用户)
            // 日志悬浮窗.日志('' + 种子用户)
            logd(种子用户)
            // 模块.抖音.意图跳转搜索页面()

            let re = null

            logd('精准引流_增强_截流对象:' + 精准引流_增强_截流对象);

            if (精准引流_增强_截流对象.indexOf('#', 0) != -1) {//在截流抖音号里面查找#字符串
                logd('找到字符串:' + '#')
                arr_截流 = 精准引流_增强_截流对象.split('#')
                logd(arr_截流);
                if (精准引流_增强_下标 >= arr_截流.length) {
                    logd('精准引流_增强_下标:' + 精准引流_增强_下标 + ',大于等于' + arr_截流.length);
                    精准引流_增强_下标 = 0
                }
                截流抖音号 = arr_截流[精准引流_增强_下标]
                logd('截流抖音号_切割:' + 截流抖音号);

            } else {
                logd('没找到字符串:' + '#')
            }

            re = 模块.抖音.意图跳转搜索结果(截流抖音号)   // 模块.抖音.点击搜索框()
            精准引流_增强_下标++
            if (re) {
                种子用户 = 截流抖音号 // 防止进入粉丝列表不匹配报错
                //重新赋值时间,重新计算超时时间
                起始时间 = 模块.获取时间().秒
                // 模块.气泡弹窗('成功进入搜索页面')
                // 日志悬浮窗.日志('成功进入搜索页面')
                // 输入账号(种子用户)
                // 输入账号('51270507770')
                //re.setText(种子用户)
                // sleep(3000)
                let re2 = 进入粉丝列表()
                if (re2 === '点击搜索失败') {
                    取消所有正在运行的线程()
                    模块.对话框消息('警告!!', '无障碍权限异常!!,请重启手机继续运行')
                    模块.停止脚本()
                }
                if (!re2) {
                    // 跳转异常次数++
                    // if (跳转异常次数 >= 20) {
                    //     取消所有正在运行的线程()
                    //     模块.对话框消息('警告!!', '连续' + 跳转异常次数 + '次搜索失败,运行异常!!停止运行!!,请检查无障碍无障碍权限,建议手机重启再继续运行')
                    //     停止脚本()
                    // }
                    continue
                } else {
                    // 跳转异常次数 = 0
                }
                起始时间 = 模块.获取时间().秒  //重置超时时间
                // 模块.气泡弹窗('成功进入粉丝列表')
                // 日志悬浮窗.日志('成功进入粉丝列表')
                if (模块.抖音.粉丝0_粉丝列表()) {
                    logd('粉丝数量0,获取下一个')
                    // toast1('粉丝数量0,获取下一个')
                    continue
                }
                let re = 操作粉丝列表用户()
                if (!re) {

                }
            }
        } else {
            // 模块.气泡弹窗('失败:' + 种子用户)
            // 日志悬浮窗.日志('失败:' + 种子用户)
            sleep(2000)
            continue
        }

    }

}

function 精准引流() {

    // let re = 操作粉丝列表用户()
    // if (!re) {
    //
    // }

    logd('精准引流');

    let 超时秒数 = 20
    let 起始时间 = 模块.获取时间().秒
    // let 跳转异常次数 = 0

    while (true) {

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            // 模块.气泡弹窗('智能引流,' + '任务超时')
            // 日志悬浮窗.日志('智能引流,' + '任务超时')
            logd('精准引流,' + '任务超时')
            // toast('精准引流,' + '任务超时')
            return null
        }

        种子用户 = true //模块.抖音.获取种子用户()

        if (种子用户) {
            种子用户 = 种子用户 + ''
            // 模块.气泡弹窗('' + 种子用户)
            // 日志悬浮窗.日志('' + 种子用户)
            logd(种子用户)
            // 模块.抖音.意图跳转搜索页面()
            let re = 模块.抖音.意图跳转搜索结果(截流抖音号)   // 模块.抖音.点击搜索框()
            if (re) {
                种子用户 = 截流抖音号 //要一致,否则进入粉丝列表判断是否相等的时候会报错
                //重新赋值时间,重新计算超时时间
                起始时间 = 模块.获取时间().秒
                // 模块.气泡弹窗('成功进入搜索页面')
                // 日志悬浮窗.日志('成功进入搜索页面')
                // 输入账号(种子用户)
                // 输入账号('51270507770')
                //re.setText(种子用户)
                // sleep(3000)
                let re2 = 进入粉丝列表()
                if (re2 === '点击搜索失败') {
                    取消所有正在运行的线程()
                    模块.对话框消息('警告!!', '无障碍权限异常!!,请重启手机继续运行')
                    模块.停止脚本()
                }
                if (!re2) {
                    // 跳转异常次数++
                    // if (跳转异常次数 >= 20) {
                    //     取消所有正在运行的线程()
                    //     模块.对话框消息('警告!!', '连续' + 跳转异常次数 + '次搜索失败,运行异常!!停止运行!!,请检查无障碍无障碍权限,建议手机重启再继续运行')
                    //     停止脚本()
                    // }
                    continue
                } else {
                    // 跳转异常次数 = 0
                }
                起始时间 = 模块.获取时间().秒  //重置超时时间
                // 模块.气泡弹窗('成功进入粉丝列表')
                // 日志悬浮窗.日志('成功进入粉丝列表')
                if (模块.抖音.粉丝0_粉丝列表()) {
                    logd('粉丝数量0,获取下一个')
                    // toast1('粉丝数量0,获取下一个')
                    continue
                }
                let re = 操作粉丝列表用户()
                if (!re) {

                }
            }
        } else {
            // 模块.气泡弹窗('失败:' + 种子用户)
            // 日志悬浮窗.日志('失败:' + 种子用户)
            sleep(2000)
            continue
        }

    }

}

function 检测验证码() {
    if (模块.抖音.请完成下列验证()) {
        取消所有正在运行的线程()
        异步对话框('警告!', '出现了验证码,手动处理完再继续运行')
        模块.停止脚本()
    }

    if (模块.抖音.依次点击文字()) {
        取消所有正在运行的线程()
        异步对话框('警告!', '出现了验证码,手动处理完再继续运行')
        模块.停止脚本()
    }

    if (模块.抖音.拖动滑块完成拼图()) {
        取消所有正在运行的线程()
        异步对话框('警告!', '出现了验证码,手动处理完再继续运行')
        模块.停止脚本()
    }
}

function 智能引流() {

    let 超时秒数 = 50
    let 起始时间 = 模块.获取时间().秒
    // let 跳转异常次数 = 0

    while (true) {

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            // 模块.气泡弹窗('智能引流,' + '任务超时')
            // 日志悬浮窗.日志('智能引流,' + '任务超时')
            logd('智能引流,' + '任务超时')
            // toast('智能引流,' + '任务超时')
            return null
        }

        // if (模块.抖音.请完成下列验证()) {
        //     取消所有正在运行的线程()
        //     模块.对话框消息('警告!', '出现了验证码,手动处理完再继续运行')
        //     模块.停止脚本()
        // }
        //
        // if (模块.抖音.依次点击文字()) {
        //     取消所有正在运行的线程()
        //     模块.对话框消息('警告!', '出现了验证码,手动处理完再继续运行')
        //     模块.停止脚本()
        // }
        //
        // if (模块.抖音.拖动滑块完成拼图()) {
        //     取消所有正在运行的线程()
        //     模块.对话框消息('警告!', '出现了验证码,手动处理完再继续运行')
        //     模块.停止脚本()
        // }

        检测验证码()

        模块.关闭干扰窗口()

        if (模块.抖音.您今日的搜索次数已达上限()) {
            取消所有正在运行的线程()
            模块.对话框消息('警告!', '您今日的搜索次数已达上限')
            模块.停止脚本()
        }

        // 模块.关闭干扰窗口()

        种子用户 = null
        if (任务_爬种子账号) {
            种子用户 = 模块.数据库.巨推宝_取数据() // 模块.数据库.小武_取数据()
            if (!种子用户) {
                sleep(2000)
                continue
            }
            if (种子用户 === '没数据了') {
                取消所有正在运行的线程()
                模块.对话框消息('警告!!', '小武数据库没有数据了')
                模块.停止脚本()
            }
        } else {
            种子用户 = 模块.抖音.获取种子用户()
        }
        if (种子用户) {
            种子用户 = 种子用户 + ''
            // 模块.气泡弹窗('' + 种子用户)
            // 日志悬浮窗.日志('' + 种子用户)
            logd(种子用户)
            // 模块.抖音.意图跳转搜索页面()
            let re = 模块.抖音.意图跳转搜索结果(种子用户)   // 模块.抖音.点击搜索框()
            if (re) {
                //重新赋值时间,重新计算超时时间
                // 起始时间 = 模块.获取时间().秒
                // 模块.气泡弹窗('成功进入搜索页面')
                // 日志悬浮窗.日志('成功进入搜索页面')
                // 输入账号(种子用户)
                // 输入账号('51270507770')
                //re.setText(种子用户)
                // sleep(3000)

                if (任务_爬种子账号) {
                    if (!模块.抖音.综合_抖音号_粉丝()) {
                        continue
                    }
                }

                let re2 = 进入粉丝列表()
                if (re2 === '点击搜索失败') {
                    取消所有正在运行的线程()
                    模块.对话框消息('警告!!', '无障碍权限异常!!,请重启手机继续运行')
                    模块.停止脚本()
                }
                if (!re2) {
                    // 跳转异常次数++
                    // if (跳转异常次数 >= 20) {
                    //     取消所有正在运行的线程()
                    //     模块.对话框消息('警告!!', '连续' + 跳转异常次数 + '次搜索失败,运行异常!!停止运行!!,请检查无障碍无障碍权限,建议手机重启再继续运行')
                    //     停止脚本()
                    // }
                    // logd('没有正确进入粉丝列表,记录这个种子用户');
                    // let myDate = new Date()
                    // let 最长毫秒数 = myDate.getTime();        //获取当前时间(从1970.1.1开始的毫秒数)
                    // 模块.数据库.小武_上传数据到dy('yczzzh', 最长毫秒数 + '', 种子用户, 最长毫秒数 + '')
                    logd('没有正确进入粉丝列表,记录这个种子用户');
                    模块.数据库.小武_上传数据到dy('yczzzh', 种子用户, 种子用户, 种子用户)
                    continue
                } else {
                    // 跳转异常次数 = 0
                }
                起始时间 = 模块.获取时间().秒  //重置超时时间
                // 模块.气泡弹窗('成功进入粉丝列表')
                // 日志悬浮窗.日志('成功进入粉丝列表')
                if (模块.抖音.粉丝0_粉丝列表()) {
                    logd('粉丝数量0,获取下一个')
                    // toast1('粉丝数量0,获取下一个')
                    continue
                }
                let re = 操作粉丝列表用户()
                if (!re) {

                }
            }
        } else {
            // 模块.气泡弹窗('失败:' + 种子用户)
            // 日志悬浮窗.日志('失败:' + 种子用户)
            sleep(2000)
            continue
        }

    }
}

function 进入粉丝列表() {

    let 超时秒数 = 20 //太长的话会导致下一次获取种子用户的时间拉得很长
    let 起始时间 = 模块.获取时间().秒
    let 点击搜索失败次数 = 0
    let 已点搜索结果 = null
    let 启动异常统计 = null

    // 延时不可少,跳转种子账号以后需要时间来反应,
    sleep(4000);

    // if (!模块.抖音.下拉点击综合_抖音号_粉丝()) {
    //     return null
    // }

    while (true) {

        // if (!模块.抖音.点击搜索结果抖音号() && !模块.抖音.点击搜索结果粉丝()) {
        //     点击搜索失败次数++
        //     if (点击搜索失败次数 >= 40) {   //没找到搜索结果报错,因为是直接跳转,所有一般不会出现,调高点
        //         // 取消所有正在运行的线程()
        //         // 模块.对话框消息('警告!!', '连续' + 点击搜索失败次数 + '次搜索失败,运行异常!!停止运行!!,请检查无障碍无障碍权限,建议手机重启再继续运行')
        //         // 停止脚本()
        //         toast1('连续' + 点击搜索失败次数 + '次搜索失败' + ',进入主页异常')
        //         return '点击搜索失败'
        //     }
        // } else {
        //     点击搜索失败次数 = 0
        //     已点搜索结果 = true
        // }

        检测验证码()

        模块.关闭干扰窗口()

        function 异常检测() {
            if (模块.抖音.没有搜到相关的内容() || 模块.抖音.当前无网络()) {
                if (!启动异常统计) {
                    异常计数++
                    启动异常统计 = true
                    if (异常计数 >= 100) {
                        取消所有正在运行的线程()
                        模块.对话框消息('警告!', '出现了验证码,手动处理完再继续运行')
                        模块.停止脚本()
                    }
                }
            }
        }

        // sleep(4000);

        // let 综合_抖音号_粉丝 = 模块.抖音.综合_抖音号_粉丝() //模块.抖音.搜索按钮() //模块.抖音.综合_抖音号_粉丝() // 这个关系到滑动的问题
        //
        // if (综合_抖音号_粉丝) {
        //
        //     if (任务_爬种子账号) {
        //         let 昵称 = 综合_抖音号_粉丝.text
        //         logd(昵称);
        //         if (昵称) {
        //             if (昵称.indexOf('我不是脑花', 0) != -1) {//在截流抖音号里面查找#字符串
        //                 logd('找到字符串:' + '我不是脑花')
        //                 return
        //             } else {
        //                 logd('没找到字符串:' + '我不是脑花')
        //             }
        //         }
        //     }
        //
        //
        if (模块.抖音.点击用户()) {
            if (模块.抖音.点击搜索结果抖音号() || 模块.抖音.点击搜索结果粉丝()) {
                已点搜索结果 = true
                // 点击搜索失败次数++
                // if (点击搜索失败次数 >= 5) {   //没找到搜索结果报错,因为是直接跳转,所有一般不会出现,调高点
                //     // 取消所有正在运行的线程()
                //     // 模块.对话框消息('警告!!', '连续' + 点击搜索失败次数 + '次搜索失败,运行异常!!停止运行!!,请检查无障碍无障碍权限,建议手机重启再继续运行')
                //     // 停止脚本()
                //     toast1('连续' + 点击搜索失败次数 + '次搜索失败' + ',进入主页异常')
                //     return '点击搜索失败'
                // }
            } else {
                已点搜索结果 = null
                点击搜索失败次数 = 0
            }
        } else {

            function 右滑寻找用户界面关注按钮() {

                let 超时秒数 = 20
                let 起始时间 = 模块.获取时间().秒

                logd('右滑寻找关注按钮')

                var 滑动起始x
                var 滑动起始y
                var 滑动 = 模块.抖音.综合_搜索结果_反馈入口()

                if (滑动) {
                    滑动起始x = (滑动.bounds.left + 滑动.bounds.right) / 2
                    滑动起始y = (滑动.bounds.top + 滑动.bounds.bottom) / 2
                    swipeToPoint(滑动起始x, 滑动起始y, 模块.分辨率x * 0, 滑动起始y, 1000)
                    sleep(5000)
                }

                // 模块.横向滑动屏幕(0.7, 0)
                // sleep(5000);

                while (true) {

                    if (模块.抖音.搜索_用户_关注按钮()) {
                        return true
                    } else {

                        /* if (!this.点击关闭评论() && !this.点击左上角返回()) {
                            back()
                            sleep(2500)
                        } */

                        // 模块.横向滑动屏幕(0.7, 0)
                        // sleep(5000);

                        if (滑动) {
                            滑动起始x = (滑动.bounds.left + 滑动.bounds.right) / 2
                            滑动起始y = (滑动.bounds.top + 滑动.bounds.bottom) / 2
                            swipeToPoint(滑动起始x, 滑动起始y, 模块.分辨率x * 0, 滑动起始y, 1000)
                            sleep(5000)
                        }

                    }

                    if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
                        logd('右滑寻找用户界面关注按钮,' + '任务超时')
                        // toast('右滑寻找用户界面关注按钮,' + '任务超时')
                        return null
                    }

                }
            }

            let 右滑寻找 = 右滑寻找用户界面关注按钮()

            if (右滑寻找) {
                if (模块.抖音.点击搜索结果抖音号() || 模块.抖音.点击搜索结果粉丝()) {
                    已点搜索结果 = true
                    // 点击搜索失败次数++
                    // if (点击搜索失败次数 >= 5) {   //没找到搜索结果报错,因为是直接跳转,所有一般不会出现,调高点
                    //     // 取消所有正在运行的线程()
                    //     // 模块.对话框消息('警告!!', '连续' + 点击搜索失败次数 + '次搜索失败,运行异常!!停止运行!!,请检查无障碍无障碍权限,建议手机重启再继续运行')
                    //     // 停止脚本()
                    //     toast1('连续' + 点击搜索失败次数 + '次搜索失败' + ',进入主页异常')
                    //     return '点击搜索失败'
                    // }
                } else {
                    已点搜索结果 = null
                    点击搜索失败次数 = 0
                }
            }

        }
        //
        // }

        // if (!模块.抖音.下拉点击综合_抖音号_粉丝()) {
        //     return null
        // }

        let 昵称 = 模块.抖音.主页用户昵称()
        if (昵称) {

            if (昵称 === '我不是脑花') {
                logd('用户昵称:' + 昵称 + ',跳过此人');
                toast('用户昵称:' + 昵称 + ',跳过此人');
                return null
            }

            let 抖音号 = 模块.抖音.抖音号()
            logd('抖音号:' + 抖音号);
            if (抖音号) {
                if (抖音号 != 种子用户) {
                    logd('抖音号:' + 抖音号 + ',种子用户' + 种子用户 + ',不匹配,跳过此人');
                    // toast('抖音号:' + 抖音号 + ',种子用户' + 种子用户 + ',不匹配,跳过此人');
                    return null
                }
                logd('抖音号:' + 抖音号 + ',种子用户' + 种子用户 + ',完全匹配,继续操作');
            }

            if (模块.抖音.点击粉丝()) {

                异常检测()
                if (!模块.抖音.粉丝列表界面()) {
                    // 模块.气泡弹窗('粉丝列表不可见')
                    // 日志悬浮窗.日志('粉丝列表不可见')
                    return null
                }
            }
        }


        if (模块.抖音.粉丝列表所有用户()) {
            if (任务_爬种子账号) {
                // 模块.抖音.点击关注()
                back()
                sleep(2000);
            }
            异常计数 = 0 //重置一下
            检测无障碍失效次数 = 0
            return true
        }

        异常检测()

        if (模块.抖音.您今日的搜索次数已达上限()) {
            取消所有正在运行的线程()
            模块.对话框消息('警告!', '您今日的搜索次数已达上限')
            模块.停止脚本()
        }

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            // 模块.气泡弹窗('进入粉丝列表,' + '任务超时')
            // 日志悬浮窗.日志('进入粉丝列表,' + '任务超时')
            // if (!已点搜索结果) {
            //     return '点击搜索失败'
            // }
            logd('进入粉丝列表,' + '任务超时')
            // toast('进入粉丝列表,' + '任务超时')
            if (模块.抖音.综合_用户()) {
                检测无障碍失效次数++
                logd('检测无障碍失效次数:' + 检测无障碍失效次数);
                if (检测无障碍失效次数 >= 16) {
                    检测无障碍失效次数 = 0
                    return '点击搜索失败'
                }
            } else {
                检测无障碍失效次数 = 0
            }
            return null
        }

    }

}

function 操作粉丝列表用户() {

    logd('操作粉丝列表用户')

    let 超时秒数 = 60
    let 起始时间 = 模块.获取时间().秒

    while (true) {

        // 检测验证码()

        检测验证码()

        模块.关闭干扰窗口()

        if (任务_爬种子账号) {

            function 筛选上传种子用户到自己数据库() {

                let 粉丝数量 = 模块.抖音.获取粉丝数量()
                if (粉丝数量) {
                    //// 模块.气泡弹窗('粉丝数量:' + 粉丝数量)

                    if (任务_爬种子账号) {
                        logd('任务_爬种子账号');
                        粉丝间隔[0] = 500
                        粉丝间隔[1] = 9999
                        logd(粉丝间隔[0]);
                        logd(粉丝间隔[1]);
                    }

                    if (粉丝数量 > 粉丝间隔[0] && 粉丝数量 < 粉丝间隔[1]) {
                        // 模块.气泡弹窗('粉丝数量:' + 粉丝数量 + ',符合条件')
                        logd('粉丝数量:' + 粉丝数量 + ',符合条件')
                        toast1('粉丝数量:' + 粉丝数量 + ',符合条件')
                    } else {
                        // 模块.气泡弹窗('粉丝数量:' + 粉丝数量 + ',不符合条件')
                        logd('粉丝数量:' + 粉丝数量 + ',不符合条件')
                        toast1('粉丝数量:' + 粉丝数量 + ',不符合条件')
                        return null
                        if (!模块.抖音.返回粉丝列表()) {
                            return null
                        }
                        // continue
                    }

                    let 抖音号 = 模块.抖音.抖音号()
                    logd('抖音号:' + 抖音号);
                    if (抖音号) {
                        模块.数据库.存数据(抖音号)
                    }

                } else {
                    // 模块.气泡弹窗('没找到:' + '粉丝数量')
                    return null
                }

            }

            筛选上传种子用户到自己数据库()
            return true
        }

        let arr = 模块.抖音.粉丝列表所有用户()
        if (arr) {

            for (let i = 0; i < arr.length; i++) {

                // logd('粉丝列表对象:' + arr[i])
                // logd('粉丝列表昵称:' + arr[i].text)
                let 用户昵称 = arr[i].text
                let 跳过 = null
                let 跳过计数 = 0
                // 模块.气泡弹窗('用户昵称:' + 用户昵称)
                // 日志悬浮窗.日志('用户昵称:' + 用户昵称)
                logd('用户昵称:' + 用户昵称)

                for (let i = 0; i < 已点用户.length; i++) {
                    //logd(已点用户[i]);
                    if (已点用户[i] == 用户昵称) {
                        // 模块.气泡弹窗('用户昵称:' + 用户昵称 + ',已点击过,跳过此用户')
                        // 日志悬浮窗.日志('用户昵称:' + 用户昵称 + ',已点击过,跳过此用户')
                        跳过 = true
                        跳过计数 = 跳过计数 + 1
                    }
                }

                logd('跳过计数:' + 跳过计数)
                logd('arr.length:' + arr.length)

                //如果一页的人都点过,就判断粉丝列表所有用户都操作完了
                if (跳过计数 == arr.length) {
                    // 模块.气泡弹窗('本页所有用户都点击过,退出本次任务')
                    return '停止'
                }

                if (跳过) {
                    continue
                }

                clickPoint((arr[i].bounds.left + arr[i].bounds.right) / 2, (arr[i].bounds.top + arr[i].bounds.bottom) / 2)
                // clickPoint(arr[i].bounds.right, arr[i].bounds.top)
                sleep(模块.抖音.点击延时)

                // 检测验证码()

                检测验证码()

                模块.关闭干扰窗口()

                // 模块.刷新控件缓存()
                // 模块.强制刷新节点()

                let 有操作 = null

                //重新计算超时时间
                起始时间 = 模块.获取时间().秒

                已点用户.push(用户昵称)

                let 粉丝数量 = 模块.抖音.获取粉丝数量()
                if (粉丝数量) {
                    //// 模块.气泡弹窗('粉丝数量:' + 粉丝数量)

                    if (任务_爬种子账号) {
                        logd('任务_爬种子账号');
                        粉丝间隔[0] = 0
                        粉丝间隔[1] = 9999
                        logd(粉丝间隔[0]);
                        logd(粉丝间隔[1]);
                    }

                    if (粉丝数量 > 粉丝间隔[0] && 粉丝数量 < 粉丝间隔[1]) {
                        // 模块.气泡弹窗('粉丝数量:' + 粉丝数量 + ',符合条件')
                        logd('粉丝数量:' + 粉丝数量 + ',符合条件')
                        toast1('粉丝数量:' + 粉丝数量 + ',符合条件')
                    } else {
                        // 模块.气泡弹窗('粉丝数量:' + 粉丝数量 + ',不符合条件')
                        logd('粉丝数量:' + 粉丝数量 + ',不符合条件')
                        toast1('粉丝数量:' + 粉丝数量 + ',不符合条件')
                        //return null
                        if (!模块.抖音.返回粉丝列表()) {
                            return null
                        }
                        continue
                    }
                } else {
                    // 模块.气泡弹窗('没找到:' + '粉丝数量')
                }

                if (任务_爬种子账号) {
                    if (模块.抖音.点击粉丝()) {
                        if (!模块.抖音.粉丝列表界面()) {
                            // 模块.气泡弹窗('粉丝列表不可见')
                            // 日志悬浮窗.日志('粉丝列表不可见')
                            if (!模块.抖音.返回粉丝列表()) {
                                return null
                            }
                            continue
                        }
                        back()
                        sleep(1500);
                    }
                    let 抖音号 = 模块.抖音.抖音号()
                    logd('抖音号:' + 抖音号);
                    if (抖音号) {
                        if (模块.抖音.主页用户昵称() === '我不是脑花') {
                            logd('我不是脑花');
                            toast('我不是脑花');
                            continue
                        }
                        模块.数据库.存数据(抖音号)
                    }
                    if (!模块.抖音.返回粉丝列表()) {
                        return null
                    }
                    continue
                }

                if (模块.抖音.私密账号()) {
                    // 模块.气泡弹窗('私密账号,不符合条件')
                    if (!模块.抖音.返回粉丝列表()) {
                        return null
                    }
                    continue
                }

                if (模块.抖音.作品数量0()) {
                    // 模块.气泡弹窗('作品数量:0,不符合条件')
                    //return null
                    if (!模块.抖音.返回粉丝列表()) {
                        return null
                    }
                    continue
                }

                let 作品数量 = 模块.抖音.获取作品数量()
                if (作品数量) {
                    作品数量 = 作品数量 * 1
                    //// 模块.气泡弹窗('作品数量:' + 作品数量)
                    if (作品数量 >= 筛选作品数量) {
                        // 模块.气泡弹窗('作品数量:' + 作品数量 + ',符合条件')
                        // 日志悬浮窗.日志('作品数量:' + 作品数量 + ',符合条件')
                    } else {
                        // 模块.气泡弹窗('作品数量:' + 作品数量 + ',不符合条件')
                        // 日志悬浮窗.日志('作品数量:' + 作品数量 + ',不符合条件')
                        //return null
                        if (!模块.抖音.返回粉丝列表()) {
                            return null
                        }
                        continue
                    }
                } else {
                    // 模块.气泡弹窗('没找到:' + '作品数量')
                }

                // 模块.抖音.点击作品数量()
                // 模块.抖音.点击最新()

                if (执行任务 != '粉丝画像引流') {

                    模块.抖音.点击第一个作品()

                    // 模块.气泡弹窗('到达:' + '关注点赞评论分享页面')
                    /* if (模块.抖音.计算百分比概率(关注概率)) {
                        // 模块.气泡弹窗('概率值:' + 关注概率 + ',触发关注事件')

                    } */

                    logd('计算关注概率')

                    if (模块.贴牌版本() === '兰总') {
                        logd('当前概率:' + 关注概率 + ',重置为0');
                        关注概率 = 0
                    }

                    if (模块.抖音.计算百分比概率(关注概率)) {
                        // 模块.气泡弹窗('概率值:' + 关注概率 + ',触发关注事件')


                        if (模块.抖音.点击视频关注()) {
                            有操作 = true
                        }

                    }

                    logd('计算点赞概率')

                    if (模块.贴牌版本() === '兰总') {
                        if (点赞概率 > 70) {
                            logd('当前概率:' + 点赞概率 + ',重置为70');
                            点赞概率 = 70
                        }

                    }

                    if (模块.抖音.计算百分比概率(点赞概率)) {
                        // 模块.气泡弹窗('概率值:' + 点赞概率 + ',触发点赞事件')


                        if (模块.抖音.点击视频点赞()) {
                            有操作 = true
                        }

                    }

                    模块.抖音.点击视频评论()

                    logd('计算评论概率');

                    if (模块.贴牌版本() === '兰总') {
                        if (评论概率 > 10) {
                            logd('当前概率:' + 评论概率 + ',重置为10');
                            评论概率 = 10
                        }

                        // logd('当前概率:' + 评论概率 + ',重置为0');
                        // 评论概率 = 0

                    }

                    if (模块.抖音.计算百分比概率(评论概率)) {

                        // 模块.气泡弹窗('概率值:' + 评论概率 + ',触发评论事件')
                        // 日志悬浮窗.日志('概率值:' + 评论概率 + ',触发评论事件')


                        logd('概率值:' + 评论概率 + ',触发评论事件')

                        if (模块.抖音.点击评论输入框()) {
                            let 话术 = 模块.随机获取数组元素(评论话术, '#')
                            logd('话术:' + 话术)
                            评论输入账号(话术)
                            sleep(2000)
                        }
                        if (模块.抖音.点击评论输入框发送()) {
                            有操作 = true
                        }
                    }

                    // 模块.刷新控件缓存()
                    // 模块.强制刷新节点()

                    logd('计算评论点赞概率');

                    if (模块.贴牌版本() === '兰总') {
                        if (评论点赞概率 > 70) {
                            logd('当前概率:' + 评论点赞概率 + ',重置为70');
                            评论点赞概率 = 70
                        }

                    }

                    if (模块.抖音.计算百分比概率(评论点赞概率)) {
                        // 模块.气泡弹窗('概率值:' + 评论点赞概率 + ',触发评论点赞事件')
                        // 日志悬浮窗.日志('概率值:' + 评论点赞概率 + ',触发评论点赞事件')


                        logd('概率值:' + 评论点赞概率 + ',触发评论点赞事件')

                        if (模块.抖音.点击评论区所有爱心()) {
                            有操作 = true
                        }
                    }


                } else {
                    logd('计算头像点赞概率');

                    if (模块.贴牌版本() === '兰总') {
                        if (头像点赞概率 > 70) {
                            logd('当前概率:' + 头像点赞概率 + ',重置为70');
                            头像点赞概率 = 70
                        }

                    }

                    if (模块.抖音.计算百分比概率(头像点赞概率)) {
                        // 模块.气泡弹窗('概率值:' + 头像点赞概率 + ',触发头像点赞事件')
                        // 日志悬浮窗.日志('概率值:' + 头像点赞概率 + ',触发头像点赞事件')


                        logd('概率值:' + 头像点赞概率 + ',触发头像点赞事件')

                        模块.抖音.点击用户头像()
                        if (模块.抖音.点击点赞()) {
                            有操作 = true
                        }
                    }

                }

                if (有操作) {
                    已操作次数 = 已操作次数 + 1
                    // 模块.气泡弹窗('已操作次数:' + 已操作次数)
                    // 日志悬浮窗.日志('已操作次数:' + 已操作次数)
                    logd('已操作次数:' + 已操作次数 + ',执行次数:' + 执行次数)

                    if (已操作次数 >= 执行次数) {
                        取消所有正在运行的线程()
                        模块.对话框消息('提示', '已操作次数:' + 已操作次数 + ',设定的执行次数已完成')
                        模块.停止脚本()
                    }
                }
                //对于粉丝列表精准截留来说,这一步超时可能会有危险,因为粉丝列表没有纠错的地方
                if (!模块.抖音.返回粉丝列表()) {
                    return null
                }

            }

            模块.纵向滑动屏幕(0.8, 0)
            sleep(2000)

        }

        if ((模块.获取时间().秒 - 起始时间) > 超时秒数) {
            // 模块.气泡弹窗('操作粉丝列表用户,' + '任务超时')
            logd('操作粉丝列表用户,' + '任务超时')
            // toast('操作粉丝列表用户,' + '任务超时')
            return null
        }
    }
}

//  小红书评论区
function 小红书评论输入账号(a) {
    if (!a) {
        logd('读取a的值无法识别');
        return
    }
    let str = a.toString()
    logd('输入账号:' + str)
    模块.强制刷新节点()
    inputText(clz("android.widget.EditText"), str)
}

//  快手评论区
function 快手评论输入账号(a) {
    if (!a) {
        logd('读取a的值无法识别');
        return
    }
    let str = a.toString()
    logd('输入账号:' + str)
    模块.强制刷新节点()
    inputText(clz("android.widget.EditText"), str)
}

//  评论区
function 评论输入账号(a) {
    if (!a) {
        logd('读取a的值无法识别');
        return
    }
    let str = a.toString()
    logd('输入账号:' + str)
    模块.强制刷新节点()
    inputText(clz("android.widget.EditText"), str)
}

//  搜索框
function 输入账号(a) {
    if (!a) {
        logd('读取a的值无法识别');
        return
    }
    let str = a.toString()
    logd('输入账号:' + str)
    模块.强制刷新节点()
    inputText(id("com.ss.android.ugc.aweme:id/et_search_kw"), str)
}

function 引用模块() {
    模块 = require("mk/mk.js")
    logd(模块);
    // toast(模块);
}

// function 引用泡椒云模块() {
//     // 泡椒云模块 = require("mk/pjyyz.js")
//     execSync(function () {
//         require("mk/pjyyz.js")
//     }, 1000);
// }

function 自动截屏找图(p, c, x, y, ex, ey, pn) {

    let 小图 = p
    let 起始x = x
    let 起始y = y
    let 终点x = ex
    let 终点y = ey
    let 弱阈值 = 0.7
    let 图片相似度 = 0.9
    let 找图数量 = pn
    let 方法 = 5 //不知道干嘛用的
    let 点击 = null
    let 返回 = null

    if (c) {
        点击 = true
    }

    logd(小图);

    //读取在路径path的图片文件并返回一个{@link AutoImage}对象。如果文件不存在或者文件无法解码则返回null
    let sms = image.readImage(小图);
    if (模块.贴牌版本() === '采集') {
        sms = readResAutoImage("ytg.png")
    }
    logd(sms)
    if (!sms) {
        //图片要回收
        image.recycle(sms)
        return null
    }
    //在当前屏幕中查找，并且限制只查找一个
    let points = image.findImageEx(sms, 起始x, 起始y, 终点x, 终点y, 弱阈值, 图片相似度, 找图数量, 方法);
    logd("points " + JSON.stringify(points));
    //这玩意是个数组
    if (points && points.length > 0) {

        返回 = JSON.stringify(points) //返回的时候已经格式化为JSON字符串了

        for (let i = 0; i < points.length; i++) {
            logd(points[i])
            let x = parseInt((points[i].left + points[i].right) / 2)
            let y = parseInt((points[i].top + points[i].bottom) / 2)

            if (点击) {
                //点击坐标
                logd('找到图片:' + 小图, ',点击坐标:' + x + ',' + y)
                clickPoint(x, y)
            } else {
                logd('找到图片:' + 小图, ',坐标:' + x + ',' + y)
            }

        }
    } else {
        logd('没找到图片:' + 小图)
    }
    //图片要回收
    image.recycle(sms)

    return 返回

}


function 申请截图权限() {

    let request = image.requestScreenCapture(10000, 0);
    if (!request) {
        request = image.requestScreenCapture(10000, 0);
    }
    logd("申请截图结果... " + request)
    if (!request) {
        logd("申请截图权限失败,检查是否开启后台弹出,悬浮框等权限")
        toast("申请截图权限失败,检查是否开启后台弹出,悬浮框等权限")
        exit()
    }

    logd('初始化OpenCV');
    let d = image.initOpenCV();
    logd(d)

    //申请完权限至少等1s(垃圾设备多加点)再截图,否则会截不到图
    sleep(2000)
}

function 找图初始化() {
    // laoleng.EC.initImage()

    //action_timeout 找图找色动作的最大时间，超时后会自动返回避免阻塞
    // auto_click_request_dialog 是否自动点击截屏授权对话框，默认是true，自动点击
    // image.setInitParam({"action_timeout":1000});

    logd('找图初始化');

    image.setInitParam(
        {
            "action_timeout": 1000,
            "auto_click_request_dialog": false
        }
    );

}

function 自动化服务启动(time) {

    laoleng.EC.init()

    // for (var i = 0; i < time; i++) {
    //     if (isServiceOk()) {
    //         return true;
    //     }
    //     var started = startEnv();
    //     logd("第" + (i + 1) + "次启动服务结果: " + started);
    //     if (isServiceOk()) {
    //         return true;
    //     }
    //     logd("自动化服务启动失败，无法执行脚本")
    //     exit();
    // }
    // return isServiceOk();
}

function 守护自动化环境() {
    return daemonEnv(true)
}

// function 保持屏幕唤醒状态() {
//     device.keepScreenOn();
// }

function 自动化服务状态() {
    return isServiceOk()
}

function 检查申请悬浮窗权限() {
    // if (hasFloatViewPermission()) {
    //     return true
    // }
    // requestFloatViewPermission(10);
    // exit()
    if (!模块.申请悬浮窗权限()) {
        模块.停止脚本()
    }
}

function 取消所有正在运行的线程() {
    thread.stopAll();//取消所有正在运行的线程
}

function 停止脚本() {
    thread.stopAll();//取消所有正在运行的线程
    exit();//退出脚本
    ui.stopTask();//停止脚本
}

function 显示启停浮窗() {

    return showCtrlWindow()

    // if (showCtrlWindow()) {
    //     return true
    // }
}

// function 模块.对话框消息(a, b) {
//     logd('模块.对话框消息:' + a);
//     logd('模块.对话框消息:' + b);
//     toast(a + b);
//     laoleng.Alert.dialog(a, b)
// }

function 验证快手版本是否已适配() {

    // 控件好像都一样的,不需要验证了
    return true

    let obj = 模块.快手.控件.视频点赞
    for (let i in obj) {
        console.log('k:' + i, ",", 'v:' + obj[i]);
        if (模块.快手_版本号 === i) {
            logd('当前快手版本:' + 模块.快手_版本号 + ',已适配' + ',欢迎使用')
            toast1('当前快手版本:' + 模块.快手_版本号 + ',已适配' + ',欢迎使用')
            return true
        }
    }
    取消所有正在运行的线程()
    模块.对话框消息('警告!!', '当前快手版本:' + 模块.快手_版本号 + ',未适配,请联系技术支持')
    模块.停止脚本()
}

function 验证抖音版本是否已适配() {
    let obj = 模块.抖音.控件.粉丝列表所有用户
    for (let i in obj) {
        console.log('k:' + i, ",", 'v:' + obj[i]);
        if (模块.抖音版本号 === i) {
            logd('当前抖音版本:' + 模块.抖音版本号 + ',已适配' + ',欢迎使用')
            toast1('当前抖音版本:' + 模块.抖音版本号 + ',已适配' + ',欢迎使用')
            return true
        }
    }
    取消所有正在运行的线程()
    模块.对话框消息('警告!!', '当前抖音版本:' + 模块.抖音版本号 + ',未适配,请联系技术支持')
    模块.停止脚本()
}

function 验证小红书版本是否已适配() {
    let obj = 模块.小红书.控件.视频图文列表
    for (let i in obj) {
        console.log('k:' + i, ",", 'v:' + obj[i]);
        if (模块.小红书_版本号 === i) {
            logd('当前小红书版本:' + 模块.小红书_版本号 + ',已适配' + ',欢迎使用')
            toast1('当前小红书版本:' + 模块.小红书_版本号 + ',已适配' + ',欢迎使用')
            return true
        }
    }
    取消所有正在运行的线程()
    模块.对话框消息('警告!!', '当前小红书版本:' + 模块.小红书_版本号 + ',未适配,请联系技术支持')
    模块.停止脚本()
}

function 检查手机系统高于7() {
    try {
        let 手机系统 = device.getOSVersion()
        手机系统 = 手机系统 * 1
        if (手机系统 < 7) {
            取消所有正在运行的线程()
            模块.对话框消息('警告!!', '当前手机系统:' + 手机系统 + ',请使用7以上系统手机运行')
            模块.停止脚本()
        }
        logd('当前手机系统:' + 手机系统 + ',欢迎使用');
        return true
    } catch (error) {

    }
}
